[{"id":"4d6a10920a67da55d1c299110f0ce966","title":"硅谷课堂项目笔记","content":"","slug":"项目笔记/硅谷课堂","date":"2022-08-09T02:09:33.344Z","categories_index":"项目","tags_index":"Java","author_index":"Aurora"},{"id":"48cdc027ae88e3d2051d4b7a3f46b10b","title":"JavaSE基础","content":"基本语法关键字与标识符java关键字的使用定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）特点：关键字中所字母都为小写具体哪些关键字：\n保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。具体哪些保留字：goto 、const注意：自己命名标识符时要避免使用这些保留字\n标识符的使用定义：凡是自己可以起名字的地方都叫标识符。涉及到的结构：包名、类名、接口名、变量名、方法名、常量名规则：(必须要遵守。否则，编译不通过)\n规范：（可以不遵守，不影响编译和运行。但是要求大家遵守）\n包名：多单词组成时所有字母都小写：xxxyyyzzz类名、接口名：多单词组成时，所有单词首字母大写XxxYyyZzz变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词每个单词首字母大写：xxxYyyZzz常量名：所有字母大写，多单词组成用下划线连接，XXX_YYY_ZZZ\n注意点：在起名字时，为了提高阅读性，要尽量意义，“见名知意”。\n1.变量的分类按数据类型分类\n详细说明：&#x2F;&#x2F;1. 整型：byte(1字节&#x3D;8bit) \\ short(2字节) \\ int(4字节) \\ long(8字节)&#x2F;&#x2F;① byte范围：-128 ~ 127&#x2F;&#x2F; ② 声明long型变量，必须以”l”或”L”结尾&#x2F;&#x2F; ③ 通常，定义整型变量时，使用int型。&#x2F;&#x2F;④整型的常量，默认类型是：int型&#x2F;&#x2F;2. 浮点型：float(4字节) \\ double(8字节)&#x2F;&#x2F;① 浮点型，表示带小数点的数值&#x2F;&#x2F;② float表示数值的范围比long还大&#x2F;&#x2F;③ 定义float类型变量时，变量要以”f”或”F”结尾&#x2F;&#x2F;④ 通常，定义浮点型变量时，使用double型。&#x2F;&#x2F;⑤ 浮点型的常量，默认类型为：double&#x2F;&#x2F;3. 字符型：char (1字符&#x3D;2字节)&#x2F;&#x2F;① 定义char型变量，通常使用一对’’,内部只能写一个字符&#x2F;&#x2F;② 表示方式：1.声明一个字符 2.转义字符 3.直接使用 Unicode 值来表示字符型常量&#x2F;&#x2F;4.布尔型：boolean&#x2F;&#x2F;① 只能取两个值之一：true 、 false&#x2F;&#x2F;② 常常在条件判断、循环结构中使用1.2 按声明的位置分类(了解)\n定义变量的格式：数据类型  变量名 &#x3D; 变量值;或数据类型  变量名;变量名 &#x3D; 变量值;\n变量使用的注意点：① 变量必须先声明，后使用② 变量都定义在其作用域内。在作用域内，它是有效的。换句话说，出了作用域，就失效了③ 同一个作用域内，不可以声明两个同名的变量\n基本数据类型变量间运算规则4.1 涉及到的基本数据类型：除了boolean之外的其他7种4.2 自动类型转换(只涉及7种基本数据类型）结论：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。byte 、char 、short –&gt; int –&gt; long –&gt; float –&gt; double特别的：当byte、char、short三种类型的变量做运算时，结果为int型说明：此时的容量大小指的是，表示数的范围的大和小。比如：float容量要大于long的容量\n强制类型转换(只涉及7种基本数据类型）：自动类型提升运算的逆运算。1.需要使用强转符：()2.注意点：强制类型转换，可能导致精度损失。\nString与8种基本数据类型间的运算\nString属于引用数据类型,翻译为：字符串\n声明String类型变量时，使用一对””\nString可以和8种基本数据类型变量做运算，且运算只能是连接运算：+\n运算的结果仍然是String类型避免：String s &#x3D; 123;&#x2F;&#x2F;编译错误String s1 &#x3D; “123”;int i &#x3D; (int)s1;&#x2F;&#x2F;编译错误\n\n运算符算术运算符：“+ - + - * &#x2F; % (前)++ (后)++ (前)– (后)– +”\n【典型代码】\n除号：&#x2F;\nint num1 &#x3D; 12;\nint num2 &#x3D; 5;\nint result1 &#x3D; num1 &#x2F; num2;\nSystem.out.println(result1);&#x2F;&#x2F;2\n&#x2F;&#x2F; %:取余运算\n&#x2F;&#x2F;结果的符号与被模数的符号相同\n&#x2F;&#x2F;开发中，经常使用%来判断能否被除尽的情况。\nint m1 &#x3D; 12;\nint n1 &#x3D; 5;\nSystem.out.println(&quot;m1 % n1 &#x3D; &quot; + m1 % n1);\n\n【特别说明的】1.&#x2F;&#x2F;(前)++ :先自增1，后运算&#x2F;&#x2F;(后)++ :先运算，后自增12.&#x2F;&#x2F;(前)– :先自减1，后运算&#x2F;&#x2F;(后)– :先运算，后自减13.连接符：+：只能使用在String与其他数据类型变量之间使用。\n赋值运算符“赋值运算符：&#x3D;  +&#x3D;  -&#x3D;  *&#x3D;  &#x2F;&#x3D;  %&#x3D;”【典型代码】\nint i2,j2;\n&#x2F;&#x2F;连续赋值\ni2 &#x3D; j2 &#x3D; 10;\n&#x2F;&#x2F;***************\nint i3 &#x3D; 10,j3 &#x3D; 20;\nint num1 &#x3D; 10;\nnum1 +&#x3D; 2;&#x2F;&#x2F;num1 &#x3D; num1 + 2;\nSystem.out.println(num1);&#x2F;&#x2F;12\n【特别说明的】运算的结果不会改变变量本身的数据类型\n比较运算符“比较运算符（关系运算符）: &#x3D;&#x3D; !&#x3D; &gt;  &lt;  &gt;&#x3D;  &lt;&#x3D;  instanceof”【典型代码】\nint i &#x3D; 10;\nint j &#x3D; 20;\nSystem.out.println(i &#x3D;&#x3D; j);&#x2F;&#x2F;false\nSystem.out.println(i &#x3D; j);&#x2F;&#x2F;20\nboolean b1 &#x3D; true;\nboolean b2 &#x3D; false;\nSystem.out.println(b2 &#x3D;&#x3D; b1);&#x2F;&#x2F;false\nSystem.out.println(b2 &#x3D; b1);&#x2F;&#x2F;true\n\n【特别说明的】1.比较运算符的结果是boolean类型2.&gt;  &lt;  &gt;&#x3D;  &lt;&#x3D; :只能使用在数值类型的数据之间。3. &#x3D;&#x3D; 和 !&#x3D;: 不仅可以使用在数值类型数据之间，还可以使用在其他引用类型变量之间。\nAccount acct1 &#x3D; new Account(1000);\nAccount acct2 &#x3D; new Account(1000);\nboolean b1 &#x3D; (acct1 &#x3D;&#x3D; acct2);&#x2F;&#x2F;比较两个Account是否是同一个账户。\nboolean b2 &#x3D; (acct1 !&#x3D; acct2);&#x2F;&#x2F;\n逻辑运算符“逻辑运算符：&amp; &amp;&amp;  |  || !  ^”【典型代码】\n区分&amp; 与 &amp;&amp;\n相同点1：&amp; 与  &amp;&amp; 的运算结果相同\n相同点2：当符号左边是true时，二者都会执行符号右边的运算\n不同点：当符号左边是false时，&amp;继续执行符号右边的运算。&amp;&amp;不再执行符号右边的运算。\n开发中，推荐使用&amp;&amp;\nboolean b1 &#x3D; true;\nb1 &#x3D; false;\nint num1 &#x3D; 10;\nif(b1 &amp; (num1++ &gt; 0))&#123;\nSystem.out.println(&quot;我现在在北京&quot;);\n&#125;else&#123;\nSystem.out.println(&quot;我现在在南京&quot;);\n&#125;\n\t\tSystem.out.println(&quot;num1 &#x3D; &quot; + num1);\n\t\tboolean b2 &#x3D; true;\n\t\tb2 &#x3D; false;\n\t\tint num2 &#x3D; 10;\n\t\tif(b2 &amp;&amp; (num2++ &gt; 0))&#123;\n\t\t\tSystem.out.println(&quot;我现在在北京&quot;);\n\t\t&#125;else&#123;\n\t\t\tSystem.out.println(&quot;我现在在南京&quot;);\n\t\t&#125;\n\t\tSystem.out.println(&quot;num2 &#x3D; &quot; + num2);\n\t\t&#x2F;&#x2F; 区分：| 与 || \n\t\t&#x2F;&#x2F;相同点1：| 与  || 的运算结果相同\n\t\t&#x2F;&#x2F;相同点2：当符号左边是false时，二者都会执行符号右边的运算\n\t\t&#x2F;&#x2F;不同点3：当符号左边是true时，|继续执行符号右边的运算，而||不再执行符号右边的运算\n\t\t&#x2F;&#x2F;开发中，推荐使用||\n\t\tboolean b3 &#x3D; false;\n\t\tb3 &#x3D; true;\n\t\tint num3 &#x3D; 10;\n\t\tif(b3 | (num3++ &gt; 0))&#123;\n\t\t\tSystem.out.println(&quot;我现在在北京&quot;);\n\t\t&#125;else&#123;\n\t\t\tSystem.out.println(&quot;我现在在南京&quot;);\n\t\t&#125;\n\t\tSystem.out.println(&quot;num3 &#x3D; &quot; + num3);\n\t\tboolean b4 &#x3D; false;\n\t\tb4 &#x3D; true;\n\t\tint num4 &#x3D; 10;\n\t\tif(b4 || (num4++ &gt; 0))&#123;\n\t\t\tSystem.out.println(&quot;我现在在北京&quot;);\n\t\t&#125;else&#123;\n\t\t\tSystem.out.println(&quot;我现在在南京&quot;);\n\t\t&#125;\n\t\tSystem.out.println(&quot;num4 &#x3D; &quot; + num4);\n【特别说明的】1.逻辑运算符操作的都是boolean类型的变量。而且结果也是boolean类型\n位运算符“位运算符：&lt;&lt;  &gt;&gt; &gt;&gt;&gt; &amp;  |  ^  ~”【典型代码】\nint i &#x3D; 21;\ni &#x3D; -21;\nSystem.out.println(&quot;i &lt;&lt; 2 :&quot; + (i &lt;&lt; 2));\nSystem.out.println(&quot;i &lt;&lt; 3 :&quot; + (i &lt;&lt; 3));\nSystem.out.println(&quot;i &lt;&lt; 27 :&quot; + (i &lt;&lt; 27));\n\t\tint m &#x3D; 12;\n\t\tint n &#x3D; 5;\n\t\tSystem.out.println(&quot;m &amp; n :&quot; + (m &amp; n));\n\t\tSystem.out.println(&quot;m | n :&quot; + (m | n));\n\t\tSystem.out.println(&quot;m ^ n :&quot; + (m ^ n));\n三元运算符“三元运算符：(条件表达式)? 表达式1 : 表达式2”【典型代码】1.获取两个整数的较大值2.获取三个数的最大值【特别说明的】\n\n说明① 条件表达式的结果为boolean类型② 根据条件表达式真或假，决定执行表达式1，还是表达式2.如果表达式为true，则执行表达式1。如果表达式为false，则执行表达式2。③ 表达式1 和表达式2要求是一致的。④ 三元运算符可以嵌套使用\n凡是可以使用三元运算符的地方，都可以改写为if-else反之，不成立。\n如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。原因：简洁、执行效率高。\n\n","slug":"学习笔记/JavaSE基础","date":"2022-08-07T05:38:27.648Z","categories_index":"基础","tags_index":"Java","author_index":"Aurora"}]