{"title":"Java高频面试题总结","uid":"942bb69cff6f2eb67f0b841ccb267414","slug":"学习笔记/Java高频面试题","date":"2022-12-05T08:00:50.000Z","updated":"2023-02-11T05:31:47.862Z","comments":true,"path":"api/articles/学习笔记/Java高频面试题.json","keywords":null,"cover":"https://images.pexels.com/photos/12360549/pexels-photo-12360549.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2","content":"<h1 id=\"1-抽象类与接口的区别\"><a href=\"#1-抽象类与接口的区别\" class=\"headerlink\" title=\"1.抽象类与接口的区别\"></a>1.抽象类与接口的区别</h1><ul>\n<li>接口中除了static、final变量以外不能有其他变量，而抽象类不一定</li>\n<li>一个类可以实现多个接口但是实现一个抽象类，接口本身可以通过extends关键字扩展多个接口</li>\n<li>接口里只能包含抽象方法，静态方法和默认方法，不能为普通方法提供实现，抽象类则可以包含普通方法，接口中的普通方法默认为抽象方法</li>\n<li>接口中不能有构造器，抽象类中可以(用于子类调用完成抽象类的初始化操作)</li>\n</ul>\n<h1 id=\"2-final、static、synchronized\"><a href=\"#2-final、static、synchronized\" class=\"headerlink\" title=\"2.final、static、synchronized\"></a>2.final、static、synchronized</h1><p>final：</p>\n<ul>\n<li>被final修饰的类不能被继承</li>\n<li>被final修饰的方法不可用被重写</li>\n<li>被final修饰的变量不可用被改变，如果修饰引用表示引用不可变，引用指向的内容可变</li>\n<li>被final修饰的方法，jvm会尝试将其内联，以提高运行效率</li>\n<li>被final修饰的常量，在编译阶段会存入常量池</li>\n</ul>\n<p>static：</p>\n<ul>\n<li>被static修饰的变量&#x2F;方法都属于类的静态资源，由类的实例所共享</li>\n</ul>\n<p>synchronized（同步锁）：</p>\n<p>被sychronized修饰的代码块或方法只会有一个线程执行，已到达保证并发安全的效果</p>\n<ul>\n<li>修饰实例方法：作用于当前实例加锁</li>\n<li>修饰静态方法：作用于当前类对象加锁</li>\n<li>修饰代码块：指定加锁对象，对给定对象加锁</li>\n</ul>\n<h1 id=\"3-String、StringBuilder、StringBuffer区别\"><a href=\"#3-String、StringBuilder、StringBuffer区别\" class=\"headerlink\" title=\"3.String、StringBuilder、StringBuffer区别\"></a>3.String、StringBuilder、StringBuffer区别</h1><p>String类中使用final关键字修饰字符数组来保存字符串，所以String是不可变的</p>\n<p>StringBuilder和StringBuffer都是继承自AbstractStringBuilder 类，底层字符数组没有使用final修饰，所以可变</p>\n<p>StringBuffer中对方法加了同步锁，所以线程安全，而StringBuilder则没有</p>\n<p>总结：</p>\n<p>操作少量数据时使用String</p>\n<p>单线程操作字符串缓冲区下操作大量数据时使用StringBuilder</p>\n<p>多线程操作字符串缓冲区下操作大量数据时使用StringBuffer</p>\n<h1 id=\"4-equals与-x3D-x3D-的区别和使用场景\"><a href=\"#4-equals与-x3D-x3D-的区别和使用场景\" class=\"headerlink\" title=\"4.equals与&#x3D;&#x3D;的区别和使用场景\"></a>4.equals与&#x3D;&#x3D;的区别和使用场景</h1><p>如果是基本数据类型 &#x3D;&#x3D; 就是比较的值，引用数据类型&#x3D;&#x3D;比较的是内存地址</p>\n<p>equals没有被重写时，比较的是内存地址，被重写则是比较值</p>\n<h1 id=\"5-深拷贝和浅拷贝\"><a href=\"#5-深拷贝和浅拷贝\" class=\"headerlink\" title=\"5.深拷贝和浅拷贝\"></a>5.深拷贝和浅拷贝</h1><p><strong>浅拷贝</strong> ：只复制指向某个对象的指针，而不复制对象本身，相当于是新建了一个对象，该对象复制了原对象的指针，新旧对象还是共用一个内存块</p>\n<p><strong>深拷贝</strong>：是新建一个一模一样的对象，该对象与原对象不共享内存，修改新对象也不会影响原对象</p>\n<h1 id=\"6-Error和Exception\"><a href=\"#6-Error和Exception\" class=\"headerlink\" title=\"6.Error和Exception\"></a>6.Error和Exception</h1><ul>\n<li>Exception 和 Error体现了java平台设计者对不同异常情况的分类, Exception是程序正常运行中,可以预料的意外情况,可以被捕获,进行相应的处理.</li>\n<li>Error 是指正常情况下,不大可能出现的情况,绝大部分的Error 都会导致程序处于非正常的,不可恢复的状态, 不需要捕获, 常见的OutOfMemoryError 是Error的子类.</li>\n</ul>\n<h1 id=\"7-反射的机制和应用场景\"><a href=\"#7-反射的机制和应用场景\" class=\"headerlink\" title=\"7.反射的机制和应用场景\"></a>7.反射的机制和应用场景</h1><p><strong>反射</strong>：动态获取信息或动态调用对象方法的机制，对于任何一个类都能知道他的所有属性和方法，对于任何对象，都可以获取对象的方法</p>\n<p><strong>应用场景</strong>：</p>\n<ul>\n<li>通过配置信息调用类的方法</li>\n<li>结合注解实现特殊功能</li>\n<li>按需加载jar包或class</li>\n</ul>\n<h1 id=\"8\"><a href=\"#8\" class=\"headerlink\" title=\"8.\"></a>8.</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">谈谈List,Set,Map的区别？\n谈谈ArrayList和LinkedList的区别？\n请说一下HashMap与HashTable的区别\n谈一谈ArrayList的扩容机制？\nHashMap 的实现原理？\n请简述 LinkedHashMap 的工作原理和使用方式？\n谈谈对于ConcurrentHashMap的理解?</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Java 中使用多线程的方式有哪些？\n说一下线程的几种状态？\n如何实现多线程中的同步？\n谈谈线程死锁，如何有效的避免线程死锁？\n谈谈线程阻塞的原因？\n请谈谈 Thread 中 run() 与 start()的区别？\nsynchronized和volatile关键字的区别？\n如何保证线程安全？\n谈谈ThreadLocal用法和原理？\nJava 线程中notify 和 notifyAll有什么区别？\nsynchronized和volatile关键字的区别？</code></pre>\n","text":"1.抽象类与接口的区别 接口中除了static、final变量以外不能有其他变量，而抽象类不一定 一个类可以实现多个接口但是实现一个抽象类，接口本身可以通过extends关键字扩展多个接口 接口里只能包含抽象方法，静态方法和默认方法，不能为普通方法提供实现，抽象类则可以包含普通方...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"面试","slug":"面试","count":1,"path":"api/tags/面试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">1.抽象类与接口的区别</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-final%E3%80%81static%E3%80%81synchronized\"><span class=\"toc-text\">2.final、static、synchronized</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-String%E3%80%81StringBuilder%E3%80%81StringBuffer%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">3.String、StringBuilder、StringBuffer区别</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-equals%E4%B8%8E-x3D-x3D-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">4.equals与&#x3D;&#x3D;的区别和使用场景</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">5.深拷贝和浅拷贝</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-Error%E5%92%8CException\"><span class=\"toc-text\">6.Error和Exception</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-%E5%8F%8D%E5%B0%84%E7%9A%84%E6%9C%BA%E5%88%B6%E5%92%8C%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">7.反射的机制和应用场景</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8\"><span class=\"toc-text\">8.</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java基础","uid":"3316961ecf1671c6065b043220187c47","slug":"学习笔记/JavaSE","date":"2022-12-05T08:00:50.000Z","updated":"2023-02-13T07:41:28.944Z","comments":true,"path":"api/articles/学习笔记/JavaSE.json","keywords":null,"cover":"https://images.pexels.com/photos/12360546/pexels-photo-12360546.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2","text":"第一章Java基本语法1.1关键字与标识符1.1.1java关键字的使用定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词） 特点：关键字中所字母都为小写 具体哪些关键字： 1.1.2保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。具体哪些保留字：go...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JavaWeb","uid":"2174f5d6204b80063f7ff0e3c82666fd","slug":"学习笔记/JavaWeb","date":"2022-12-05T08:00:50.000Z","updated":"2023-02-11T05:31:23.975Z","comments":true,"path":"api/articles/学习笔记/JavaWeb.json","keywords":null,"cover":"https://images.pexels.com/photos/12360547/pexels-photo-12360547.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2","text":"JavaWeb ","link":"","photos":[],"count_time":{"symbolsCount":8,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}