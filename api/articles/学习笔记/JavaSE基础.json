{"title":"JavaSE基础","uid":"48cdc027ae88e3d2051d4b7a3f46b10b","slug":"学习笔记/JavaSE基础","date":"2022-08-07T05:38:27.648Z","updated":"2022-08-08T06:54:17.037Z","comments":true,"path":"api/articles/学习笔记/JavaSE基础.json","keywords":null,"cover":[],"content":"<h1 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h1><h2 id=\"关键字与标识符\"><a href=\"#关键字与标识符\" class=\"headerlink\" title=\"关键字与标识符\"></a>关键字与标识符</h2><h3 id=\"java关键字的使用\"><a href=\"#java关键字的使用\" class=\"headerlink\" title=\"java关键字的使用\"></a>java关键字的使用</h3><p>定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）<br>特点：关键字中所字母都为小写<br>具体哪些关键字：<br><img src=\"https://raw.githubusercontent.com/xiaokang111/BlogPicture/main/img/1-1.png\" alt=\"关键字\"></p>\n<h3 id=\"保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。\"><a href=\"#保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。\" class=\"headerlink\" title=\"保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。\"></a>保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。</h3><p>具体哪些保留字：goto 、const<br>注意：自己命名标识符时要避免使用这些保留字</p>\n<h3 id=\"标识符的使用\"><a href=\"#标识符的使用\" class=\"headerlink\" title=\"标识符的使用\"></a>标识符的使用</h3><p>定义：凡是自己可以起名字的地方都叫标识符。<br>涉及到的结构：<br>包名、类名、接口名、变量名、方法名、常量名<br>规则：(必须要遵守。否则，编译不通过)</p>\n<p>规范：（可以不遵守，不影响编译和运行。但是要求大家遵守）</p>\n<p>包名：多单词组成时所有字母都小写：xxxyyyzzz<br>类名、接口名：多单词组成时，所有单词首字母大写XxxYyyZzz<br>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词每个单词首字母大写：xxxYyyZzz<br>常量名：所有字母大写，多单词组成用下划线连接，XXX_YYY_ZZZ</p>\n<p>注意点：<br>在起名字时，为了提高阅读性，要尽量意义，“见名知意”。</p>\n<h2 id=\"1-变量的分类\"><a href=\"#1-变量的分类\" class=\"headerlink\" title=\"1.变量的分类\"></a>1.变量的分类</h2><h3 id=\"按数据类型分类\"><a href=\"#按数据类型分类\" class=\"headerlink\" title=\"按数据类型分类\"></a>按数据类型分类</h3><p><img src=\"https://raw.githubusercontent.com/xiaokang111/BlogPicture/main/img/1-2.png\" alt=\"数据类型\"></p>\n<p>详细说明：<br>&#x2F;&#x2F;1. 整型：byte(1字节&#x3D;8bit) \\ short(2字节) \\ int(4字节) \\ long(8字节)<br>&#x2F;&#x2F;① byte范围：-128 ~ 127<br>&#x2F;&#x2F; ② 声明long型变量，必须以”l”或”L”结尾<br>&#x2F;&#x2F; ③ 通常，定义整型变量时，使用int型。<br>&#x2F;&#x2F;④整型的常量，默认类型是：int型<br>&#x2F;&#x2F;2. 浮点型：float(4字节) \\ double(8字节)<br>&#x2F;&#x2F;① 浮点型，表示带小数点的数值<br>&#x2F;&#x2F;② float表示数值的范围比long还大<br>&#x2F;&#x2F;③ 定义float类型变量时，变量要以”f”或”F”结尾<br>&#x2F;&#x2F;④ 通常，定义浮点型变量时，使用double型。<br>&#x2F;&#x2F;⑤ 浮点型的常量，默认类型为：double<br>&#x2F;&#x2F;3. 字符型：char (1字符&#x3D;2字节)<br>&#x2F;&#x2F;① 定义char型变量，通常使用一对’’,内部只能写一个字符<br>&#x2F;&#x2F;② 表示方式：1.声明一个字符 2.转义字符 3.直接使用 Unicode 值来表示字符型常量<br>&#x2F;&#x2F;4.布尔型：boolean<br>&#x2F;&#x2F;① 只能取两个值之一：true 、 false<br>&#x2F;&#x2F;② 常常在条件判断、循环结构中使用<br>1.2 按声明的位置分类(了解)<br><img src=\"https://raw.githubusercontent.com/xiaokang111/BlogPicture/main/img/1-3.png\" alt=\"变量分类\"></p>\n<h3 id=\"定义变量的格式：\"><a href=\"#定义变量的格式：\" class=\"headerlink\" title=\"定义变量的格式：\"></a>定义变量的格式：</h3><p>数据类型  变量名 &#x3D; 变量值;<br>或<br>数据类型  变量名;<br>变量名 &#x3D; 变量值;</p>\n<h3 id=\"变量使用的注意点：\"><a href=\"#变量使用的注意点：\" class=\"headerlink\" title=\"变量使用的注意点：\"></a>变量使用的注意点：</h3><p>① 变量必须先声明，后使用<br>② 变量都定义在其作用域内。在作用域内，它是有效的。换句话说，出了作用域，就失效了<br>③ 同一个作用域内，不可以声明两个同名的变量</p>\n<h3 id=\"基本数据类型变量间运算规则\"><a href=\"#基本数据类型变量间运算规则\" class=\"headerlink\" title=\"基本数据类型变量间运算规则\"></a>基本数据类型变量间运算规则</h3><p>4.1 涉及到的基本数据类型：除了boolean之外的其他7种<br>4.2 自动类型转换(只涉及7种基本数据类型）<br>结论：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。<br>byte 、char 、short –&gt; int –&gt; long –&gt; float –&gt; double<br>特别的：当byte、char、short三种类型的变量做运算时，结果为int型<br>说明：此时的容量大小指的是，表示数的范围的大和小。比如：float容量要大于long的容量</p>\n<h3 id=\"强制类型转换-只涉及7种基本数据类型）：自动类型提升运算的逆运算。\"><a href=\"#强制类型转换-只涉及7种基本数据类型）：自动类型提升运算的逆运算。\" class=\"headerlink\" title=\"强制类型转换(只涉及7种基本数据类型）：自动类型提升运算的逆运算。\"></a>强制类型转换(只涉及7种基本数据类型）：自动类型提升运算的逆运算。</h3><p>1.需要使用强转符：()<br>2.注意点：强制类型转换，可能导致精度损失。</p>\n<h3 id=\"String与8种基本数据类型间的运算\"><a href=\"#String与8种基本数据类型间的运算\" class=\"headerlink\" title=\"String与8种基本数据类型间的运算\"></a>String与8种基本数据类型间的运算</h3><ol>\n<li>String属于引用数据类型,翻译为：字符串</li>\n<li>声明String类型变量时，使用一对””</li>\n<li>String可以和8种基本数据类型变量做运算，且运算只能是连接运算：+</li>\n<li>运算的结果仍然是String类型<br>避免：<br>String s &#x3D; 123;&#x2F;&#x2F;编译错误<br>String s1 &#x3D; “123”;<br>int i &#x3D; (int)s1;&#x2F;&#x2F;编译错误</li>\n</ol>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"算术运算符：\"><a href=\"#算术运算符：\" class=\"headerlink\" title=\"算术运算符：\"></a>算术运算符：</h3><p>“+ - + - * &#x2F; % (前)++ (后)++ (前)– (后)– +”</p>\n<p>【典型代码】</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">除号：&#x2F;\nint num1 &#x3D; 12;\nint num2 &#x3D; 5;\nint result1 &#x3D; num1 &#x2F; num2;\nSystem.out.println(result1);&#x2F;&#x2F;2\n&#x2F;&#x2F; %:取余运算\n&#x2F;&#x2F;结果的符号与被模数的符号相同\n&#x2F;&#x2F;开发中，经常使用%来判断能否被除尽的情况。\nint m1 &#x3D; 12;\nint n1 &#x3D; 5;\nSystem.out.println(&quot;m1 % n1 &#x3D; &quot; + m1 % n1);</code></pre>\n\n<p>【特别说明的】<br>1.&#x2F;&#x2F;(前)++ :先自增1，后运算<br>&#x2F;&#x2F;(后)++ :先运算，后自增1<br>2.&#x2F;&#x2F;(前)– :先自减1，后运算<br>&#x2F;&#x2F;(后)– :先运算，后自减1<br>3.连接符：+：只能使用在String与其他数据类型变量之间使用。</p>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><p>“赋值运算符：&#x3D;  +&#x3D;  -&#x3D;  *&#x3D;  &#x2F;&#x3D;  %&#x3D;”<br>【典型代码】</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int i2,j2;\n&#x2F;&#x2F;连续赋值\ni2 &#x3D; j2 &#x3D; 10;\n&#x2F;&#x2F;***************\nint i3 &#x3D; 10,j3 &#x3D; 20;\nint num1 &#x3D; 10;\nnum1 +&#x3D; 2;&#x2F;&#x2F;num1 &#x3D; num1 + 2;\nSystem.out.println(num1);&#x2F;&#x2F;12</code></pre>\n<p>【特别说明的】<br>运算的结果不会改变变量本身的数据类型</p>\n<h3 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h3><p>“比较运算符（关系运算符）: &#x3D;&#x3D; !&#x3D; &gt;  &lt;  &gt;&#x3D;  &lt;&#x3D;  instanceof”<br>【典型代码】</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int i &#x3D; 10;\nint j &#x3D; 20;\nSystem.out.println(i &#x3D;&#x3D; j);&#x2F;&#x2F;false\nSystem.out.println(i &#x3D; j);&#x2F;&#x2F;20\nboolean b1 &#x3D; true;\nboolean b2 &#x3D; false;\nSystem.out.println(b2 &#x3D;&#x3D; b1);&#x2F;&#x2F;false\nSystem.out.println(b2 &#x3D; b1);&#x2F;&#x2F;true</code></pre>\n\n<p>【特别说明的】<br>1.比较运算符的结果是boolean类型<br>2.&gt;  &lt;  &gt;&#x3D;  &lt;&#x3D; :只能使用在数值类型的数据之间。<br>3. &#x3D;&#x3D; 和 !&#x3D;: 不仅可以使用在数值类型数据之间，还可以使用在其他引用类型变量之间。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Account acct1 &#x3D; new Account(1000);\nAccount acct2 &#x3D; new Account(1000);\nboolean b1 &#x3D; (acct1 &#x3D;&#x3D; acct2);&#x2F;&#x2F;比较两个Account是否是同一个账户。\nboolean b2 &#x3D; (acct1 !&#x3D; acct2);&#x2F;&#x2F;</code></pre>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>“逻辑运算符：&amp; &amp;&amp;  |  || !  ^”<br>【典型代码】</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">区分&amp; 与 &amp;&amp;\n相同点1：&amp; 与  &amp;&amp; 的运算结果相同\n相同点2：当符号左边是true时，二者都会执行符号右边的运算\n不同点：当符号左边是false时，&amp;继续执行符号右边的运算。&amp;&amp;不再执行符号右边的运算。\n开发中，推荐使用&amp;&amp;\nboolean b1 &#x3D; true;\nb1 &#x3D; false;\nint num1 &#x3D; 10;\nif(b1 &amp; (num1++ &gt; 0))&#123;\nSystem.out.println(&quot;我现在在北京&quot;);\n&#125;else&#123;\nSystem.out.println(&quot;我现在在南京&quot;);\n&#125;\n\t\tSystem.out.println(&quot;num1 &#x3D; &quot; + num1);\n\t\tboolean b2 &#x3D; true;\n\t\tb2 &#x3D; false;\n\t\tint num2 &#x3D; 10;\n\t\tif(b2 &amp;&amp; (num2++ &gt; 0))&#123;\n\t\t\tSystem.out.println(&quot;我现在在北京&quot;);\n\t\t&#125;else&#123;\n\t\t\tSystem.out.println(&quot;我现在在南京&quot;);\n\t\t&#125;\n\t\tSystem.out.println(&quot;num2 &#x3D; &quot; + num2);\n\t\t&#x2F;&#x2F; 区分：| 与 || \n\t\t&#x2F;&#x2F;相同点1：| 与  || 的运算结果相同\n\t\t&#x2F;&#x2F;相同点2：当符号左边是false时，二者都会执行符号右边的运算\n\t\t&#x2F;&#x2F;不同点3：当符号左边是true时，|继续执行符号右边的运算，而||不再执行符号右边的运算\n\t\t&#x2F;&#x2F;开发中，推荐使用||\n\t\tboolean b3 &#x3D; false;\n\t\tb3 &#x3D; true;\n\t\tint num3 &#x3D; 10;\n\t\tif(b3 | (num3++ &gt; 0))&#123;\n\t\t\tSystem.out.println(&quot;我现在在北京&quot;);\n\t\t&#125;else&#123;\n\t\t\tSystem.out.println(&quot;我现在在南京&quot;);\n\t\t&#125;\n\t\tSystem.out.println(&quot;num3 &#x3D; &quot; + num3);\n\t\tboolean b4 &#x3D; false;\n\t\tb4 &#x3D; true;\n\t\tint num4 &#x3D; 10;\n\t\tif(b4 || (num4++ &gt; 0))&#123;\n\t\t\tSystem.out.println(&quot;我现在在北京&quot;);\n\t\t&#125;else&#123;\n\t\t\tSystem.out.println(&quot;我现在在南京&quot;);\n\t\t&#125;\n\t\tSystem.out.println(&quot;num4 &#x3D; &quot; + num4);</code></pre>\n<p>【特别说明的】<br>1.逻辑运算符操作的都是boolean类型的变量。而且结果也是boolean类型</p>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p>“位运算符：&lt;&lt;  &gt;&gt; &gt;&gt;&gt; &amp;  |  ^  ~”<br>【典型代码】</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int i &#x3D; 21;\ni &#x3D; -21;\nSystem.out.println(&quot;i &lt;&lt; 2 :&quot; + (i &lt;&lt; 2));\nSystem.out.println(&quot;i &lt;&lt; 3 :&quot; + (i &lt;&lt; 3));\nSystem.out.println(&quot;i &lt;&lt; 27 :&quot; + (i &lt;&lt; 27));\n\t\tint m &#x3D; 12;\n\t\tint n &#x3D; 5;\n\t\tSystem.out.println(&quot;m &amp; n :&quot; + (m &amp; n));\n\t\tSystem.out.println(&quot;m | n :&quot; + (m | n));\n\t\tSystem.out.println(&quot;m ^ n :&quot; + (m ^ n));</code></pre>\n<h3 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h3><p>“三元运算符：(条件表达式)? 表达式1 : 表达式2”<br>【典型代码】<br>1.获取两个整数的较大值<br>2.获取三个数的最大值<br>【特别说明的】</p>\n<ol>\n<li>说明<br>① 条件表达式的结果为boolean类型<br>② 根据条件表达式真或假，决定执行表达式1，还是表达式2.<br>如果表达式为true，则执行表达式1。<br>如果表达式为false，则执行表达式2。<br>③ 表达式1 和表达式2要求是一致的。<br>④ 三元运算符可以嵌套使用</li>\n<li>凡是可以使用三元运算符的地方，都可以改写为if-else<br>反之，不成立。</li>\n<li>如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。原因：简洁、执行效率高。</li>\n</ol>\n","text":"基本语法关键字与标识符java关键字的使用定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）特点：关键字中所字母都为小写具体哪些关键字： 保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。具体哪些保留字：goto 、const注意：自己命名标识符时要避...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"基础","slug":"基础","count":1,"path":"api/categories/基础.json"}],"tags":[{"name":"Java","slug":"Java","count":2,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">基本语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E6%A0%87%E8%AF%86%E7%AC%A6\"><span class=\"toc-text\">关键字与标识符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#java%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">java关键字的使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%9D%E7%95%99%E5%AD%97%EF%BC%9A%E7%8E%B0Java%E7%89%88%E6%9C%AC%E5%B0%9A%E6%9C%AA%E4%BD%BF%E7%94%A8%EF%BC%8C%E4%BD%86%E4%BB%A5%E5%90%8E%E7%89%88%E6%9C%AC%E5%8F%AF%E8%83%BD%E4%BC%9A%E4%BD%9C%E4%B8%BA%E5%85%B3%E9%94%AE%E5%AD%97%E4%BD%BF%E7%94%A8%E3%80%82\"><span class=\"toc-text\">保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AF%86%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">标识符的使用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">1.变量的分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">按数据类型分类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">定义变量的格式：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">变量使用的注意点：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E9%97%B4%E8%BF%90%E7%AE%97%E8%A7%84%E5%88%99\"><span class=\"toc-text\">基本数据类型变量间运算规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E5%8F%AA%E6%B6%89%E5%8F%8A7%E7%A7%8D%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%89%EF%BC%9A%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E6%8F%90%E5%8D%87%E8%BF%90%E7%AE%97%E7%9A%84%E9%80%86%E8%BF%90%E7%AE%97%E3%80%82\"><span class=\"toc-text\">强制类型转换(只涉及7种基本数据类型）：自动类型提升运算的逆运算。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#String%E4%B8%8E8%E7%A7%8D%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%97%B4%E7%9A%84%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">String与8种基本数据类型间的运算</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%9A\"><span class=\"toc-text\">算术运算符：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">赋值运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">比较运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">逻辑运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">位运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">三元运算符</span></a></li></ol></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"硅谷课堂项目笔记","uid":"4d6a10920a67da55d1c299110f0ce966","slug":"项目笔记/硅谷课堂","date":"2022-08-09T02:09:33.344Z","updated":"2022-08-09T02:10:20.813Z","comments":true,"path":"api/articles/项目笔记/硅谷课堂.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[{"name":"项目","slug":"项目","count":1,"path":"api/categories/项目.json"}],"tags":[{"name":"Java","slug":"Java","count":2,"path":"api/tags/Java.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}