{"title":"SpringMVC","uid":"cd53cdbf97b8f99c953dd3eda45eed25","slug":"学习笔记/SpringMVC","date":"2022-12-05T08:00:50.000Z","updated":"2023-04-25T14:11:25.091Z","comments":true,"path":"api/articles/学习笔记/SpringMVC.json","keywords":null,"cover":"https://img1.baidu.com/it/u=68948553,1079424840&fm=253&fmt=auto&app=120&f=JPEG?w=1280&h=800","content":"<h1 id=\"SpringMVC笔记\"><a href=\"#SpringMVC笔记\" class=\"headerlink\" title=\"SpringMVC笔记\"></a>SpringMVC笔记</h1><h2 id=\"MVC架构\"><a href=\"#MVC架构\" class=\"headerlink\" title=\"MVC架构\"></a>MVC架构</h2><p>SSM : Spring+SpringMVC+Mybatis    (JavaWeb做项目)</p>\n<p>重点：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>SpringMVC的执行流程</strong></p>\n<p><strong>SSM框架的整合</strong></p></blockquote>\n<ul>\n<li>**MVC : 模型(dao,service)    视图(jsp)    控制器(Servlet)**，是一种软件设计规范。（Servlet重点 : <strong>转发，重定向</strong>）</li>\n<li>是将业务逻辑、数据、显示分离的方法来组织代码。</li>\n<li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li>\n<li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p>\n<p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p>\n<p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。 也就是说控制器做了个调度员的工作。</p></blockquote>\n<p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p>\n<p><img src=\"C:/Users/63194/AppData/Roaming/Typora/typora-user-images/image-20230425131351836.png\" alt=\"image-20230425131351836\"></p>\n<p><strong>JSP : 本质就是一个Servlet</strong></p>\n<h3 id=\"Model1时代\"><a href=\"#Model1时代\" class=\"headerlink\" title=\"Model1时代\"></a>Model1时代</h3><ul>\n<li>在web早期的开发中，通常采用的都是Model1。</li>\n<li>Model1中，主要分为两层，视图层和模型层。</li>\n</ul>\n<p><img src=\"C:/Users/63194/AppData/Roaming/Typora/typora-user-images/image-20230425131440407.png\" alt=\"image-20230425131440407\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Model1优点：架构简单，比较适合小型项目开发；</p>\n<p>Model1缺点：JSP职责不单一，职责过重，不便于维护；</p></blockquote>\n<h3 id=\"Model2时代\"><a href=\"#Model2时代\" class=\"headerlink\" title=\"Model2时代\"></a>Model2时代</h3><p>Model2把一个项目分成三部分，包括<strong>视图、控制、模型。</strong></p>\n<p><img src=\"C:/Users/63194/AppData/Roaming/Typora/typora-user-images/image-20230425131515002.png\" alt=\"image-20230425131515002\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>用户发请求</li>\n<li>Servlet接收请求数据，并调用对应的业务逻辑方法</li>\n<li>业务处理完毕，返回更新后的数据给servlet</li>\n<li>servlet转向到JSP，由JSP来渲染页面</li>\n<li>响应给前端更新后的页面</li>\n</ol></blockquote>\n<p><strong>职责分析 :</strong> </p>\n<p><strong>Controller：控制器</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>取得表单数据</li>\n<li>调用业务逻辑</li>\n<li>转向指定的页面</li>\n</ol></blockquote>\n<p><strong>Model：模型</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>业务逻辑</li>\n<li>保存数据的状态</li>\n</ol></blockquote>\n<p><strong>View：视图</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>显示页面</li>\n</ol></blockquote>\n<p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model  1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p>\n<h2 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h2><p>新建一个Maven工程当做父工程！ pom依赖！</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;4.12&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;2.5&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;2.2&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;jstl&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;1.2&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<p>建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！</p>\n<p><img src=\"C:/Users/63194/AppData/Roaming/Typora/typora-user-images/image-20230425131701069.png\" alt=\"image-20230425131701069\"></p>\n<p>导入servlet 和 jsp 的 jar 依赖</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;dependency&gt;\n    &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.5&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.2&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>编写一个Servlet类，用来处理用户的请求</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package com.lc.servlet;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\npublic class HelloServlet extends HttpServlet &#123;\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n        &#x2F;&#x2F;1.获取前端参数\n        String method &#x3D; req.getParameter(&quot;method&quot;);\n        if (method.equals(&quot;add&quot;))&#123;\n            req.getSession().setAttribute(&quot;msg&quot;,&quot;执行了add方法&quot;);\n        &#125;\n        if (method.equals(&quot;delete&quot;))&#123;\n            req.getSession().setAttribute(&quot;msg&quot;,&quot;执行了delete方法&quot;);\n        &#125;\n        &#x2F;&#x2F;2.调用业务层\n        &#x2F;&#x2F;3.视图转发或者重定向\n        req.getRequestDispatcher(&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;test.jsp&quot;).forward(req,resp);\n    &#125;\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n        doGet(req,resp);\n    &#125;\n&#125;</code></pre>\n\n<p>编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p>\n<pre class=\"line-numbers language-jsp\" data-language=\"jsp\"><code class=\"language-jsp\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;title&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n$&#123;msg&#125;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>在web.xml中注册Servlet</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;\n         version&#x3D;&quot;4.0&quot;&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;hello&lt;&#x2F;servlet-name&gt;\n        &lt;servlet-class&gt;com.lc.servlet.HelloServlet&lt;&#x2F;servlet-class&gt;\n    &lt;&#x2F;servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;hello&lt;&#x2F;servlet-name&gt;\n        &lt;url-pattern&gt;&#x2F;hello&lt;&#x2F;url-pattern&gt;\n    &lt;&#x2F;servlet-mapping&gt;\n    &lt;session-config&gt;\n        &lt;session-timeout&gt;15&lt;&#x2F;session-timeout&gt;\n    &lt;&#x2F;session-config&gt;\n    &lt;welcome-file-list&gt;\n        &lt;welcome-file&gt;index.jsp&lt;&#x2F;welcome-file&gt;\n    &lt;&#x2F;welcome-file-list&gt;\n&lt;&#x2F;web-app&gt;</code></pre>\n\n<p>配置Tomcat，并启动测试即可</p>\n<ul>\n<li>localhost:8080&#x2F;user?method&#x3D;add</li>\n<li>localhost:8080&#x2F;user?method&#x3D;delete</li>\n</ul>\n<h3 id=\"MVC框架要做哪些事情\"><a href=\"#MVC框架要做哪些事情\" class=\"headerlink\" title=\"MVC框架要做哪些事情\"></a>MVC框架要做哪些事情</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>将url映射到java类或java类的方法 .</li>\n<li>封装用户提交的数据 .</li>\n<li>处理请求—调用相关的业务处理—封装响应数据 .</li>\n<li>将响应的数据进行渲染 . jsp &#x2F; html 等表示层数据 .</li>\n</ol></blockquote>\n<h2 id=\"认识SpringMVC\"><a href=\"#认识SpringMVC\" class=\"headerlink\" title=\"认识SpringMVC\"></a>认识SpringMVC</h2><p><strong>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</strong></p>\n<p>官方文档：<a href=\"https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web\">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p>\n<h3 id=\"为什么学习SpringMVC\"><a href=\"#为什么学习SpringMVC\" class=\"headerlink\" title=\"为什么学习SpringMVC\"></a>为什么学习SpringMVC</h3><p>Spring MVC的特点：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>轻量级，简单易学</p>\n<p>高效 , 基于请求响应的MVC框架</p>\n<p>与Spring兼容性好，无缝结合</p>\n<p>约定优于配置</p>\n<p>功能强大：RESTful、数据验证、格式化、本地化、主题等</p>\n<p>简洁灵活</p></blockquote>\n<p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p>\n<p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p>\n<p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) ,  使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p>\n<p>**最重要的一点还是用的人多 , 使用的公司多 **</p>\n<h3 id=\"中心控制器\"><a href=\"#中心控制器\" class=\"headerlink\" title=\"中心控制器\"></a>中心控制器</h3><p>​    Spring的web框架围绕DispatcherServlet设计。  DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java  5或者以上版本的用户可以采用基于注解的controller声明方式。</p>\n<p>​     Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p>\n<p><img src=\"C:/Users/63194/AppData/Roaming/Typora/typora-user-images/image-20230425132049837.png\" alt=\"image-20230425132049837\"></p>\n<p>​    当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p>\n<p><img src=\"C:/Users/63194/AppData/Roaming/Typora/typora-user-images/image-20230425132105773.png\" alt=\"image-20230425132105773\"></p>\n<h3 id=\"SpringMVC执行原理\"><a href=\"#SpringMVC执行原理\" class=\"headerlink\" title=\"SpringMVC执行原理\"></a>SpringMVC执行原理</h3><p><img src=\"C:/Users/63194/AppData/Roaming/Typora/typora-user-images/image-20230425132123681.png\" alt=\"image-20230425132123681\"></p>\n<p><strong>简要分析执行流程</strong></p>\n<p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p>\n<p>我们假设请求的url为 : <a href=\"http://localhost:8080/SpringMVC/hello\">http://localhost:8080/SpringMVC/hello</a></p>\n<p><strong>如上url拆分成三部分：</strong></p>\n<p><a href=\"http://localhost:8080服务器域名\">http://localhost:8080服务器域名</a></p>\n<p>SpringMVC部署在服务器上的web站点</p>\n<p>hello表示控制器</p>\n<p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p>\n<p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</p>\n<p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p>\n<p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</p>\n<p>Handler让具体的Controller执行。</p>\n<p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p>\n<p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p>\n<p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p>\n<p>视图解析器将解析的逻辑视图名传给DispatcherServlet。</p>\n<p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p>\n<p>最终视图呈现给用户。</p></blockquote>\n<h2 id=\"基于注解开发SpringMVC\"><a href=\"#基于注解开发SpringMVC\" class=\"headerlink\" title=\"基于注解开发SpringMVC\"></a>基于注解开发SpringMVC</h2><p><strong>新建一个Moudle，springmvc-03-hello-annotation 。添加web支持！</strong></p>\n<p>建立包结构 com.kuang.controller</p>\n<p>由于Maven可能存在资源过滤的问题，我们将配置完善</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;build&gt;\n    &lt;resources&gt;\n        &lt;resource&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;\n            &lt;includes&gt;\n                &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;\n                &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;\n            &lt;&#x2F;includes&gt;\n            &lt;filtering&gt;false&lt;&#x2F;filtering&gt;\n        &lt;&#x2F;resource&gt;\n        &lt;resource&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n            &lt;includes&gt;\n                &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;\n                &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;\n            &lt;&#x2F;includes&gt;\n            &lt;filtering&gt;false&lt;&#x2F;filtering&gt;\n        &lt;&#x2F;resource&gt;\n    &lt;&#x2F;resources&gt;\n&lt;&#x2F;build&gt;</code></pre>\n\n<p>在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p>\n<p><img src=\"C:/Users/63194/AppData/Roaming/Typora/typora-user-images/image-20230425132303371.png\" alt=\"image-20230425132303371\"></p>\n<h3 id=\"配置web-xml\"><a href=\"#配置web-xml\" class=\"headerlink\" title=\"配置web.xml\"></a>配置web.xml</h3><p>注意点：</p>\n<ul>\n<li>注意web.xml版本问题，要最新版！</li>\n<li>注册DispatcherServlet</li>\n<li>关联SpringMVC的配置文件</li>\n<li>启动级别为1</li>\n<li>映射路径为 &#x2F; 【不要用&#x2F;*，会404】</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;\n         version&#x3D;&quot;4.0&quot;&gt;\n    &lt;!--1.注册servlet--&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;SpringMVC&lt;&#x2F;servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;\n        &lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;\n            &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;&#x2F;param-value&gt;\n        &lt;&#x2F;init-param&gt;\n        &lt;!-- 启动顺序，数字越小，启动越早 --&gt;\n        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;\n    &lt;&#x2F;servlet&gt;\n    &lt;!--所有请求都会被springmvc拦截 --&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;SpringMVC&lt;&#x2F;servlet-name&gt;\n        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;\n    &lt;&#x2F;servlet-mapping&gt;\n&lt;&#x2F;web-app&gt;</code></pre>\n\n<p><strong>&#x2F; 和 &#x2F;* 的区别：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>&lt; url-pattern &gt; &#x2F; &lt;&#x2F; url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；<br>即：.jsp 不会进入spring的 DispatcherServlet类 。<br>&lt; url-pattern &gt; &#x2F; &lt;&#x2F; url-pattern &gt; 会匹配* .jsp，<br>会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</p></blockquote>\n<h3 id=\"添加Spring-MVC配置文件\"><a href=\"#添加Spring-MVC配置文件\" class=\"headerlink\" title=\"添加Spring MVC配置文件\"></a>添加Spring MVC配置文件</h3><ul>\n<li>让IOC的注解生效</li>\n<li>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …..</li>\n<li>MVC的注解驱动</li>\n<li>配置视图解析器</li>\n</ul>\n<p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context\n        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd\n        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc\n        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd&quot;&gt;\n    &lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;\n    &lt;context:component-scan base-package&#x3D;&quot;com.kuang.controller&quot;&#x2F;&gt;\n    &lt;!-- 让Spring MVC不处理静态资源 --&gt;\n    &lt;mvc:default-servlet-handler &#x2F;&gt;\n    &lt;!--\n    支持mvc注解驱动\n        在spring中一般采用@RequestMapping注解来完成映射关系\n        要想使@RequestMapping注解生效\n        必须向上下文中注册DefaultAnnotationHandlerMapping\n        和一个AnnotationMethodHandlerAdapter实例\n        这两个实例分别在类级别和方法级别处理。\n        而annotation-driven配置帮助我们自动完成上述两个实例的注入。\n     --&gt;\n    &lt;mvc:annotation-driven &#x2F;&gt;\n    &lt;!-- 视图解析器 --&gt;\n    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;\n          id&#x3D;&quot;internalResourceViewResolver&quot;&gt;\n        &lt;!-- 前缀 --&gt;\n        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot; &#x2F;&gt;\n        &lt;!-- 后缀 --&gt;\n        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot; &#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n<p>在视图解析器中我们把所有的视图都存放在&#x2F;WEB-INF&#x2F;目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</p>\n<h3 id=\"创建Controller\"><a href=\"#创建Controller\" class=\"headerlink\" title=\"创建Controller\"></a>创建Controller</h3><p>编写一个Java控制类： com.kuang.controller.HelloController , 注意编码规范</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">package com.kuang.controller;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n@Controller\n@RequestMapping(&quot;&#x2F;HelloController&quot;)\npublic class HelloController &#123;\n    &#x2F;&#x2F;真实访问地址 : 项目名&#x2F;HelloController&#x2F;hello\n    @RequestMapping(&quot;&#x2F;hello&quot;)\n    public String sayHello(Model model)&#123;\n        &#x2F;&#x2F;向模型中添加属性msg与值，可以在JSP页面中取出并渲染\n        model.addAttribute(&quot;msg&quot;,&quot;hello,SpringMVC&quot;);\n        &#x2F;&#x2F;web-inf&#x2F;jsp&#x2F;hello.jsp\n        return &quot;hello&quot;;\n    &#125;\n&#125;</code></pre>\n\n<ul>\n<li><a href=\"https://github.com/Controller\">@Controller</a>是为了让Spring IOC容器初始化时自动扫描到；</li>\n<li><a href=\"https://github.com/RequestMapping\">@RequestMapping</a>是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是&#x2F;HelloController&#x2F;hello；</li>\n<li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li>\n<li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF&#x2F;jsp&#x2F;<strong>hello</strong>.jsp。</li>\n</ul>\n<h3 id=\"创建视图层\"><a href=\"#创建视图层\" class=\"headerlink\" title=\"创建视图层\"></a>创建视图层</h3><p>在WEB-INF&#x2F; jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p>\n<p>可以通过EL表示取出Model中存放的值，或者对象；</p>\n<pre class=\"line-numbers language-jsp\" data-language=\"jsp\"><code class=\"language-jsp\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;SpringMVC&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n    $&#123;msg&#125;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"配置Tomcat运行\"><a href=\"#配置Tomcat运行\" class=\"headerlink\" title=\"配置Tomcat运行\"></a>配置Tomcat运行</h3><p>配置Tomcat ， 开启服务器 ， 访问 对应的请求路径！</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaokang111/BlogPicture@main/img/image-20230425203454485.png\" alt=\"image-20230425203454485\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>实现步骤其实非常的简单：</p>\n<ul>\n<li>新建一个web项目</li>\n<li>导入相关jar包</li>\n<li>编写web.xml , 注册DispatcherServlet</li>\n<li>编写springmvc配置文件</li>\n<li>接下来就是去创建对应的控制类 , controller</li>\n<li>最后完善前端视图和controller之间的对应</li>\n<li>测试运行调试.</li>\n</ul>\n<p>使用springMVC必须配置的三大件：</p>\n<p><strong>处理器映射器、处理器适配器、视图解析器</strong></p>\n<p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p>\n<h2 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a>Controller</h2><h3 id=\"控制器Controller\"><a href=\"#控制器Controller\" class=\"headerlink\" title=\"控制器Controller\"></a>控制器Controller</h3><ul>\n<li>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li>\n<li>控制器负责解析用户的请求并将其转换为一个模型。</li>\n<li>在Spring MVC中一个控制器类可以包含多个方法</li>\n<li>在Spring MVC中，对于Controller的配置方式有很多种</li>\n</ul>\n<h3 id=\"Controller的配置方式\"><a href=\"#Controller的配置方式\" class=\"headerlink\" title=\"Controller的配置方式\"></a>Controller的配置方式</h3><h4 id=\"实现Controller接口\"><a href=\"#实现Controller接口\" class=\"headerlink\" title=\"实现Controller接口\"></a>实现Controller接口</h4><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;实现该接口的类获得控制器功能\npublic interface Controller &#123;\n    &#x2F;&#x2F;处理请求且返回一个模型与视图对象\n    ModelAndView handleRequest(HttpServletRequest var1, HttpServletResponse var2) throws Exception;\n&#125;</code></pre>\n\n<p><strong>测试</strong></p>\n<p>web.xml : </p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;\n         version&#x3D;&quot;4.0&quot;&gt;\n    &lt;!--1.配置DispatcherServlet--&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;\n            &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;&#x2F;param-value&gt;\n        &lt;&#x2F;init-param&gt;\n        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;\n    &lt;&#x2F;servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;\n        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;\n    &lt;&#x2F;servlet-mapping&gt;\n&lt;&#x2F;web-app&gt;</code></pre>\n\n<p>springmvc-servlet.xml :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context\n        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd\n        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc\n        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd&quot;&gt;\n    &lt;!--&lt;context:component-scan base-package&#x3D;&quot;com.lc.controller&quot; &#x2F;&gt;--&gt;\n    &lt;!--&lt;mvc:default-servlet-handler &#x2F;&gt;--&gt;\n    &lt;!--&lt;mvc:annotation-driven &#x2F;&gt;--&gt;\n    &lt;!-- 视图解析器 --&gt;\n    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;\n          id&#x3D;&quot;internalResourceViewResolver&quot;&gt;\n        &lt;!-- 前缀 --&gt;\n        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot; &#x2F;&gt;\n        &lt;!-- 后缀 --&gt;\n        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot; &#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n<p>编写一个Controller类，ControllerTest1 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;定义控制器\n&#x2F;&#x2F;注意点：不要导错包，实现Controller接口，重写方法；\npublic class ControllerTest1 implements Controller &#123;\n    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;\n        &#x2F;&#x2F;返回一个模型视图对象\n        ModelAndView mv &#x3D; new ModelAndView();\n        mv.addObject(&quot;msg&quot;,&quot;Test1Controller&quot;);\n        mv.setViewName(&quot;test&quot;);\n        return mv;\n    &#125;\n&#125;</code></pre>\n\n<p>编写完毕后，去Spring配置文件springmvc-servlet.xml中注册请求的bean；name对应请求路径，class对应处理请求的类 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;bean name&#x3D;&quot;&#x2F;t1&quot; class&#x3D;&quot;com.kuang.controller.ControllerTest1&quot;&#x2F;&gt;</code></pre>\n\n<p>编写前端test.jsp，注意在WEB-INF&#x2F;jsp目录下编写，对应我们的视图解析器 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Kuangshen&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n    Welcome to $&#123;msg&#125; !\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>编写前端test.jsp，注意在WEB-INF&#x2F;jsp目录下编写，对应我们的视图解析器 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Kuangshen&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n    Welcome to $&#123;msg&#125; !\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>配置Tomcat运行测试 :</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaokang111/BlogPicture@main/img/image-20230425203823209.png\" alt=\"image-20230425203823209\"></p>\n<p>说明 :</p>\n<ul>\n<li>实现接口Controller定义控制器是较老的办法</li>\n<li>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</li>\n</ul>\n<h4 id=\"使用注解-Controller\"><a href=\"#使用注解-Controller\" class=\"headerlink\" title=\"使用注解@Controller\"></a>使用注解@Controller</h4><p><a href=\"https://github.com/Controller\">@Controller</a>注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；(<a href=\"https://github.com/Component\">@Component</a>、<a href=\"https://github.com/Repository\">@Repository</a>、<a href=\"https://github.com/Service\">@Service</a>、<a href=\"https://github.com/Controller\">@Controller</a> )</p>\n<p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;\n&lt;context:component-scan base-package&#x3D;&quot;com.kuang.controller&quot;&#x2F;&gt;</code></pre>\n\n<p>增加一个ControllerTest2类，使用注解实现 : </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;@Controller注解的类会自动添加到Spring上下文中\n@Controller &#x2F;&#x2F;代表这个类会被Spring接管，被这个注解的类中的方法，如果返回值为String，并且有页面可以跳转，就会被视图解析器解析\npublic class ControllerTest2&#123;\n    &#x2F;&#x2F;映射访问路径\n    @RequestMapping(&quot;&#x2F;t2&quot;)\n    public String index(Model model)&#123;\n        &#x2F;&#x2F;Spring MVC会自动实例化一个Model对象用于向视图中传值\n        model.addAttribute(&quot;msg&quot;, &quot;ControllerTest2&quot;);\n        &#x2F;&#x2F;返回视图位置\n        return &quot;test&quot;;\n    &#125;\n&#125;</code></pre>\n\n<p>运行tomcat测试 :</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaokang111/BlogPicture@main/img/image-20230425203938186.png\" alt=\"image-20230425203938186\"></p>\n<p><strong>可以发现，我们的两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</strong></p>\n<h3 id=\"RequestMapping\"><a href=\"#RequestMapping\" class=\"headerlink\" title=\"RequestMapping\"></a>RequestMapping</h3><p><a href=\"https://github.com/RequestMapping\">@RequestMapping</a>注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类，表示类中所有响应请求的方法都以该地址作为父路径。</p>\n<p>只注解在方法上面 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@Controller\npublic class TestController &#123;\n    @RequestMapping(&quot;&#x2F;h1&quot;)\n    public String test()&#123;\n        return &quot;test&quot;;\n    &#125;\n&#125;</code></pre>\n\n<p>访问路径：<a href=\"http://localhost:8080/\">http://localhost:8080</a> &#x2F; 项目名 &#x2F; h1</p>\n<p>同时注解类与方法 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@Controller\n@RequestMapping(&quot;&#x2F;admin&quot;)\npublic class TestController &#123;\n    @RequestMapping(&quot;&#x2F;h1&quot;)\n    public String test()&#123;\n        return &quot;test&quot;;\n    &#125;\n&#125;</code></pre>\n\n<p>访问路径：<a href=\"http://localhost:8080/\">http://localhost:8080</a> &#x2F; 项目名&#x2F; admin &#x2F;h1 , 需要先指定类的路径再指定方法的路径；</p>\n<h2 id=\"RestFul风格\"><a href=\"#RestFul风格\" class=\"headerlink\" title=\"RestFul风格\"></a>RestFul风格</h2><p><strong>概念</strong></p>\n<p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>\n<p><strong>功能</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>资源：互联网所有的事物都可以被抽象为资源</p>\n<p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p>\n<p>分别对应 添加、 删除、修改、查询。</p></blockquote>\n<p><strong>传统方式操作资源</strong> ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"http://127.0.0.1/item/queryItem.action?id=1\">http://127.0.0.1/item/queryItem.action?id=1</a>      查询,GET</p>\n<p><a href=\"http://127.0.0.1/item/saveItem.action\">http://127.0.0.1/item/saveItem.action</a>                 新增,POST</p>\n<p><a href=\"http://127.0.0.1/item/updateItem.action\">http://127.0.0.1/item/updateItem.action</a>            更新,POST</p>\n<p><a href=\"http://127.0.0.1/item/deleteItem.action?id=1\">http://127.0.0.1/item/deleteItem.action?id=1</a>    删除,GET或POST</p></blockquote>\n<p><strong>使用RestFul操作资源</strong> ： 可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> <a href=\"http://127.0.0.1/item/1\">http://127.0.0.1/item/1</a>         查询,GET<br> <a href=\"http://127.0.0.1/item\">http://127.0.0.1/item</a>            新增,POST<br> <a href=\"http://127.0.0.1/item\">http://127.0.0.1/item</a>            更新,PUT<br> <a href=\"http://127.0.0.1/item/1\">http://127.0.0.1/item/1</a>        删除,DELETE</p></blockquote>\n<h3 id=\"传统方法\"><a href=\"#传统方法\" class=\"headerlink\" title=\"传统方法\"></a>传统方法</h3><p>新建RestFulController :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package com.lc.controller;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n@Controller\npublic class RestFulController &#123;\n    @RequestMapping(&quot;&#x2F;add&quot;)\n    public String test1(int a, int b, Model model)&#123;\n        int res &#x3D; a+b;\n        model.addAttribute(&quot;msg&quot;,&quot;结果为&quot;+res);\n        return &quot;test&quot;;\n    &#125;\n&#125;</code></pre>\n\n<p>进行访问 :</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaokang111/BlogPicture@main/img/image-20230425204135184.png\" alt=\"image-20230425204135184\"></p>\n<p>需要使用?a&#x3D;X&amp;b&#x3D;X传参</p>\n<h3 id=\"RestFul操作资源方法\"><a href=\"#RestFul操作资源方法\" class=\"headerlink\" title=\"RestFul操作资源方法\"></a>RestFul操作资源方法</h3><p>使用 <a href=\"https://github.com/PathVariable\">@PathVariable</a> 注解，让方法参数的值对应绑定到一个URI模板变量上。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@Controller\npublic class RestFulController &#123;\n    @RequestMapping(&quot;&#x2F;add&#x2F;&#123;a&#125;&#x2F;&#123;b&#125;&quot;)\n    public String test1(@PathVariable int a,@PathVariable int b, Model model)&#123;\n        int res &#x3D; a+b;\n        model.addAttribute(&quot;msg&quot;,&quot;结果为&quot;+res);\n        return &quot;test&quot;;\n    &#125;\n&#125;</code></pre>\n\n<p>进行访问 :</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaokang111/BlogPicture@main/img/image-20230425204218515.png\" alt=\"image-20230425204218515\"></p>\n<p>设置了访问路径为add&#x2F;{a}&#x2F;{b}即可</p>\n<p>需要传入指定的参数类型，若传入的参数类型错误则会报400错误 !</p>\n<h3 id=\"method指定请求类型\"><a href=\"#method指定请求类型\" class=\"headerlink\" title=\"method指定请求类型\"></a><strong>method指定请求类型</strong></h3><p><strong>使用method属性指定请求类型</strong> :</p>\n<p> 用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p>\n<p> 映射访问路径设为POST请求</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@RequestMapping(value &#x3D; &quot;&#x2F;add&#x2F;&#123;a&#125;&#x2F;&#123;b&#125;&quot;,method &#x3D; RequestMethod.POST)\n    public String test1(@PathVariable int a,@PathVariable int b, Model model)&#123;\n        int res &#x3D; a+b;\n        model.addAttribute(&quot;msg&quot;,&quot;结果为&quot;+res);\n        return &quot;test&quot;;\n    &#125;</code></pre>\n\n<p>我们使用浏览器地址栏进行访问默认是Get请求，会报错405 ：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaokang111/BlogPicture@main/img/image-20230425204250907.png\" alt=\"image-20230425204250907\"></p>\n<p>如果将POST修改为GET则可以正常访问了 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@RequestMapping(value &#x3D; &quot;&#x2F;add&#x2F;&#123;a&#125;&#x2F;&#123;b&#125;&quot;,method &#x3D; RequestMethod.GET)\n    public String test1(@PathVariable int a,@PathVariable int b, Model model)&#123;\n        int res &#x3D; a+b;\n        model.addAttribute(&quot;msg&quot;,&quot;结果为&quot;+res);\n        return &quot;test&quot;;\n    &#125;</code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaokang111/BlogPicture@main/img/image-20230425204329188.png\" alt=\"image-20230425204329188\"></p>\n<p><strong>小结：</strong></p>\n<p>Spring MVC 的 <a href=\"https://github.com/RequestMapping\">@RequestMapping</a> 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p>\n<h3 id=\"使用注解指定请求类型\"><a href=\"#使用注解指定请求类型\" class=\"headerlink\" title=\"使用注解指定请求类型\"></a>使用注解指定请求类型</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>@GetMapping  &#x3D;  <a href=\"https://github.com/RequestMapping\">@RequestMapping</a>(method &#x3D;RequestMethod.GET) </p>\n<p>@PostMapping   &#x3D;  <a href=\"https://github.com/RequestMapping\">@RequestMapping</a>(method &#x3D;RequestMethod.POST) </p>\n<p>@PutMapping  &#x3D; <a href=\"https://github.com/RequestMapping\">@RequestMapping</a>(method &#x3D;RequestMethod.PUT) </p>\n<p>@DeleteMapping  &#x3D; <a href=\"https://github.com/RequestMapping\">@RequestMapping</a>(method &#x3D;RequestMethod.DELETE) </p>\n<p>@PatchMapping  &#x3D; <a href=\"https://github.com/RequestMapping\">@RequestMapping</a>(method &#x3D;RequestMethod.PATCH) </p></blockquote>\n<p><strong>修改Controller</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@PostMapping(&quot;&#x2F;add&#x2F;&#123;a&#125;&#x2F;&#123;b&#125;&quot;)\npublic String test1(@PathVariable int a,@PathVariable int b, Model model)&#123;\n    int res &#x3D; a+b;\n    model.addAttribute(&quot;msg&quot;,&quot;结果1为&quot;+res);\n    return &quot;test&quot;;\n&#125;\n@GetMapping(&quot;&#x2F;add&#x2F;&#123;a&#125;&#x2F;&#123;b&#125;&quot;)\npublic String test2(@PathVariable int a,@PathVariable int b, Model model)&#123;\n    int res &#x3D; a+b;\n    model.addAttribute(&quot;msg&quot;,&quot;结果2为&quot;+res);\n    return &quot;test&quot;;\n&#125;</code></pre>\n\n<p>添加a.jsp，表单为提交请求 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n &lt;form action&#x3D;&quot;&#x2F;add&#x2F;1&#x2F;6&quot; method&#x3D;&quot;post&quot;&gt;\n     &lt;input type&#x3D;&quot;submit&quot;&gt;\n &lt;&#x2F;form&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>运行 :</p>\n<p>通过状态栏访问为get操作，跳转结果2（<a href=\"https://github.com/GetMapping\">@GetMapping</a>）:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaokang111/BlogPicture@main/img/image-20230425204731159.png\" alt=\"image-20230425204731159\"></p>\n<p>访问a.jsp，点击提交跳转，跳转结果1（<a href=\"https://github.com/PostMapping\">@PostMapping</a>）:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaokang111/BlogPicture@main/img/image-20230425204744612.png\" alt=\"image-20230425204744612\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaokang111/BlogPicture@main/img/image-20230425204756964.png\" alt=\"image-20230425204756964\"></p>\n<h3 id=\"使用路径变量的好处\"><a href=\"#使用路径变量的好处\" class=\"headerlink\" title=\"使用路径变量的好处\"></a>使用路径变量的好处</h3><p>简洁、高效、安全</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使路径变得更加简洁；</p>\n<p>获得参数更加方便，框架会自动进行类型转换。</p>\n<p>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是&#x2F;commit&#x2F;1&#x2F;a，则路径与方法不匹配，而不会是参数转换失败。</p>\n<p><strong>安全</strong>，不会暴露变量名</p></blockquote>\n<h2 id=\"结果跳转方式\"><a href=\"#结果跳转方式\" class=\"headerlink\" title=\"结果跳转方式\"></a>结果跳转方式</h2><h3 id=\"ModelAndView\"><a href=\"#ModelAndView\" class=\"headerlink\" title=\"ModelAndView\"></a>ModelAndView</h3><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!-- 视图解析器 --&gt;\n&lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;\n      id&#x3D;&quot;internalResourceViewResolver&quot;&gt;\n    &lt;!-- 前缀 --&gt;\n    &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot; &#x2F;&gt;\n    &lt;!-- 后缀 --&gt;\n    &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot; &#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<p>对应的controller类 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public class ControllerTest1 implements Controller &#123;\n    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;\n        &#x2F;&#x2F;返回一个模型视图对象\n        ModelAndView mv &#x3D; new ModelAndView();\n        mv.addObject(&quot;msg&quot;,&quot;ControllerTest1&quot;);\n        mv.setViewName(&quot;test&quot;);\n        return mv;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h2 id=\"重定向和转发\"><a href=\"#重定向和转发\" class=\"headerlink\" title=\"重定向和转发\"></a>重定向和转发</h2><h4 id=\"无视图解析器\"><a href=\"#无视图解析器\" class=\"headerlink\" title=\"无视图解析器\"></a>无视图解析器</h4><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p>\n<p>删除视图解析器，编写Controller代码 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@Controller\npublic class ResultSpringMVC &#123;\n    @RequestMapping(&quot;&#x2F;m1&#x2F;t1&quot;)\n    public String test(Model model)&#123;\n        &#x2F;&#x2F;转发\n        model.addAttribute(&quot;msg&quot;,&quot;ModelTest&quot;);\n        return &quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;test.jsp&quot;;\n    &#125;\n    @RequestMapping(&quot;&#x2F;m1&#x2F;t2&quot;)\n    public String test2(Model model)&#123;\n        &#x2F;&#x2F;转发二\n        model.addAttribute(&quot;msg&quot;,&quot;ModelTest&quot;);\n        return &quot;forward:&#x2F;WEB-INF&#x2F;jsp&#x2F;test.jsp&quot;;\n    &#125;\n    @RequestMapping(&quot;&#x2F;m1&#x2F;t3&quot;)\n    public String test3(Model model)&#123;\n        &#x2F;&#x2F;重定向\n        return &quot;redirect:&#x2F;WEB-INF&#x2F;jsp&#x2F;test.jsp&quot;;\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"有视图解析器\"><a href=\"#有视图解析器\" class=\"headerlink\" title=\"有视图解析器\"></a>有视图解析器</h4><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p>\n<p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p>\n<p>可以重定向到另外一个请求实现 . 直接返回redirect:+路径文件即可。</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">@Controller\npublic class ResultSpringMVC2 &#123;\n    @RequestMapping(&quot;&#x2F;rsm2&#x2F;t1&quot;)\n    public String test1()&#123;\n        &#x2F;&#x2F;转发\n        return &quot;test&quot;;\n    &#125;\n    @RequestMapping(&quot;&#x2F;rsm2&#x2F;t2&quot;)\n    public String test2()&#123;\n        &#x2F;&#x2F;重定向\n        return &quot;redirect:&#x2F;index.jsp&quot;;\n        &#x2F;&#x2F;return &quot;redirect:hello.do&quot;; &#x2F;&#x2F;hello.do为另一个请求&#x2F;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><h3 id=\"处理提交数据\"><a href=\"#处理提交数据\" class=\"headerlink\" title=\"处理提交数据\"></a>处理提交数据</h3><h4 id=\"1-提交的域名称和处理方法参数名一致\"><a href=\"#1-提交的域名称和处理方法参数名一致\" class=\"headerlink\" title=\"1.提交的域名称和处理方法参数名一致\"></a>1.<strong>提交的域名称和处理方法参数名一致</strong></h4><p>提交数据 : <a href=\"http://localhost:8080/hello?name=kuangshen\">http://localhost:8080/hello?name=kuangshen</a></p>\n<p>处理方法 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@RequestMapping(&quot;&#x2F;hello&quot;)\npublic String hello(String name)&#123;\n    System.out.println(name);\n    return &quot;hello&quot;;\n&#125;</code></pre>\n\n<h4 id=\"2、提交的域名称和处理方法参数名不一致\"><a href=\"#2、提交的域名称和处理方法参数名不一致\" class=\"headerlink\" title=\"2、提交的域名称和处理方法参数名不一致\"></a><strong>2、提交的域名称和处理方法参数名不一致</strong></h4><p>提交数据 : <a href=\"http://localhost:8080/hello?username=kuangshen%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95(%E4%BD%BF%E7%94%A8()%E6%B3%A8%E8%A7%A3%22%22%3Ehttp://localhost:8080/hello?username=kuangshen%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95(%E4%BD%BF%E7%94%A8@RequestParam(\">@RequestParam</a>注解 括号内存入提交的域名称) :</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&#x2F;&#x2F;@RequestParam(&quot;username&quot;) : username提交的域的名称 .\n@RequestMapping(&quot;&#x2F;hello&quot;)\npublic String hello(@RequestParam(&quot;username&quot;) String name)&#123;\n    System.out.println(name);\n    return &quot;hello&quot;;\n&#125;</code></pre>\n\n<h4 id=\"3、提交的是一个对象\"><a href=\"#3、提交的是一个对象\" class=\"headerlink\" title=\"3、提交的是一个对象\"></a><strong>3、提交的是一个对象</strong></h4><p>要求提交的表单域和对象的属性名一致 , 参数使用对象即可</p>\n<p>实体类 ：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public class User &#123;\n    private int id;\n    private String name;\n    private int age;\n    &#x2F;&#x2F;构造\n    &#x2F;&#x2F;get&#x2F;set\n    &#x2F;&#x2F;tostring()\n&#125;</code></pre>\n\n<p>提交数据 : <a href=\"http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15\">http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15</a></p>\n<p>处理方法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@RequestMapping(&quot;&#x2F;user&quot;)\npublic String user(User user)&#123;\n    System.out.println(user);\n    return &quot;hello&quot;;\n&#125;</code></pre>\n\n<p>后台输出 : User { id&#x3D;1, name&#x3D;’kuangshen’, age&#x3D;15 }</p>\n<p>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</p>\n<h3 id=\"数据显示到前端\"><a href=\"#数据显示到前端\" class=\"headerlink\" title=\"数据显示到前端\"></a>数据显示到前端</h3><h4 id=\"通过ModelAndView\"><a href=\"#通过ModelAndView\" class=\"headerlink\" title=\"通过ModelAndView\"></a>通过ModelAndView</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">public class ControllerTest1 implements Controller &#123;\n    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;\n        &#x2F;&#x2F;返回一个模型视图对象\n        ModelAndView mv &#x3D; new ModelAndView();\n        mv.addObject(&quot;msg&quot;,&quot;ControllerTest1&quot;);\n        mv.setViewName(&quot;test&quot;);\n        return mv;\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"通过ModelMap\"><a href=\"#通过ModelMap\" class=\"headerlink\" title=\"通过ModelMap\"></a><strong>通过ModelMap</strong></h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">@RequestMapping(&quot;&#x2F;hello&quot;)\npublic String hello(@RequestParam(&quot;username&quot;) String name, ModelMap model)&#123;\n    &#x2F;&#x2F;封装要显示到视图中的数据\n    &#x2F;&#x2F;相当于req.setAttribute(&quot;name&quot;,name);\n    model.addAttribute(&quot;name&quot;,name);\n    System.out.println(name);\n    return &quot;hello&quot;;\n&#125;</code></pre>\n\n<h4 id=\"通过Model\"><a href=\"#通过Model\" class=\"headerlink\" title=\"通过Model\"></a><strong>通过Model</strong></h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">@RequestMapping(&quot;&#x2F;ct2&#x2F;hello&quot;)\npublic String hello(@RequestParam(&quot;username&quot;) String name, Model model)&#123;\n    &#x2F;&#x2F;封装要显示到视图中的数据\n    &#x2F;&#x2F;相当于req.setAttribute(&quot;name&quot;,name);\n    model.addAttribute(&quot;msg&quot;,name);\n    System.out.println(name);\n    return &quot;test&quot;;\n&#125;</code></pre>\n\n<h4 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</p>\n<p>ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</p>\n<p>ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</p></blockquote>\n<h2 id=\"乱码问题解决\"><a href=\"#乱码问题解决\" class=\"headerlink\" title=\"乱码问题解决\"></a>乱码问题解决</h2><p>当我们在前端显示中文时，可能会出现乱码情况</p>\n<h3 id=\"JavaWeb过滤器解决\"><a href=\"#JavaWeb过滤器解决\" class=\"headerlink\" title=\"JavaWeb过滤器解决\"></a>JavaWeb过滤器解决</h3><p>编写过滤器代码 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package com.lc.filter;\nimport javax.servlet.*;\nimport java.io.IOException;\npublic class EncodingFilter implements Filter &#123;\n    public void init(FilterConfig filterConfig) throws ServletException &#123;\n    &#125;\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;\n        servletRequest.setCharacterEncoding(&quot;utf-8&quot;);\n        servletResponse.setCharacterEncoding(&quot;utf-8&quot;);\n        filterChain.doFilter(servletRequest,servletResponse);\n    &#125;\n    public void destroy() &#123;\n    &#125;\n&#125;</code></pre>\n\n<p>在web.xml中配置 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;filter&gt;\n    &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;\n    &lt;filter-class&gt;com.lc.filter.EncodingFilter&lt;&#x2F;filter-class&gt;\n&lt;&#x2F;filter&gt;\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;\n    &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;\n&lt;&#x2F;filter-mapping&gt;</code></pre>\n\n<h3 id=\"配置SpringMVC的乱码过滤\"><a href=\"#配置SpringMVC的乱码过滤\" class=\"headerlink\" title=\"配置SpringMVC的乱码过滤\"></a>配置SpringMVC的乱码过滤</h3><p>修改了xml文件 : </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;filter&gt;\n        &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;\n        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;\n            &lt;param-value&gt;utf-8&lt;&#x2F;param-value&gt;\n        &lt;&#x2F;init-param&gt;\n    &lt;&#x2F;filter&gt;\n    &lt;filter-mapping&gt;\n        &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;\n        &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;\n    &lt;&#x2F;filter-mapping&gt;</code></pre>\n\n<p>有些极端情况下.这个过滤器对get的支持不好 .</p>\n<h3 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h3><p>修改tomcat配置文件service.xml ： 设置编码！</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;Connector URIEncoding&#x3D;&quot;utf-8&quot; port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;\n           connectionTimeout&#x3D;&quot;20000&quot;\n           redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</code></pre>\n\n<p>自定义过滤器，然后在web.xml中配置过滤器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package com.kuang.filter;\nimport javax.servlet.*;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.util.Map;\n&#x2F;**\n * 解决get和post请求 全部乱码的过滤器\n *&#x2F;\npublic class GenericEncodingFilter implements Filter &#123;\n    @Override\n    public void destroy() &#123;\n    &#125;\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;\n        &#x2F;&#x2F;处理response的字符编码\n        HttpServletResponse myResponse&#x3D;(HttpServletResponse) response;\n        myResponse.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);\n        &#x2F;&#x2F; 转型为与协议相关对象\n        HttpServletRequest httpServletRequest &#x3D; (HttpServletRequest) request;\n        &#x2F;&#x2F; 对request包装增强\n        HttpServletRequest myrequest &#x3D; new MyRequest(httpServletRequest);\n        chain.doFilter(myrequest, response);\n    &#125;\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException &#123;\n    &#125;\n&#125;\n&#x2F;&#x2F;自定义request对象，HttpServletRequest的包装类\nclass MyRequest extends HttpServletRequestWrapper &#123;\n    private HttpServletRequest request;\n    &#x2F;&#x2F;是否编码的标记\n    private boolean hasEncode;\n    &#x2F;&#x2F;定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰\n    public MyRequest(HttpServletRequest request) &#123;\n        super(request);&#x2F;&#x2F; super必须写\n        this.request &#x3D; request;\n    &#125;\n    &#x2F;&#x2F; 对需要增强方法 进行覆盖\n    @Override\n    public Map getParameterMap() &#123;\n        &#x2F;&#x2F; 先获得请求方式\n        String method &#x3D; request.getMethod();\n        if (method.equalsIgnoreCase(&quot;post&quot;)) &#123;\n            &#x2F;&#x2F; post请求\n            try &#123;\n                &#x2F;&#x2F; 处理post乱码\n                request.setCharacterEncoding(&quot;utf-8&quot;);\n                return request.getParameterMap();\n            &#125; catch (UnsupportedEncodingException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125; else if (method.equalsIgnoreCase(&quot;get&quot;)) &#123;\n            &#x2F;&#x2F; get请求\n            Map&lt;String, String[]&gt; parameterMap &#x3D; request.getParameterMap();\n            if (!hasEncode) &#123; &#x2F;&#x2F; 确保get手动编码逻辑只运行一次\n                for (String parameterName : parameterMap.keySet()) &#123;\n                    String[] values &#x3D; parameterMap.get(parameterName);\n                    if (values !&#x3D; null) &#123;\n                        for (int i &#x3D; 0; i &lt; values.length; i++) &#123;\n                            try &#123;\n                                &#x2F;&#x2F; 处理get乱码\n                                values[i] &#x3D; new String(values[i]\n                                        .getBytes(&quot;ISO-8859-1&quot;), &quot;utf-8&quot;);\n                            &#125; catch (UnsupportedEncodingException e) &#123;\n                                e.printStackTrace();\n                            &#125;\n                        &#125;\n                    &#125;\n                &#125;\n                hasEncode &#x3D; true;\n            &#125;\n            return parameterMap;\n        &#125;\n        return super.getParameterMap();\n    &#125;\n    &#x2F;&#x2F;取一个值\n    @Override\n    public String getParameter(String name) &#123;\n        Map&lt;String, String[]&gt; parameterMap &#x3D; getParameterMap();\n        String[] values &#x3D; parameterMap.get(name);\n        if (values &#x3D;&#x3D; null) &#123;\n            return null;\n        &#125;\n        return values[0]; &#x2F;&#x2F; 取回参数的第一个值\n    &#125;\n    &#x2F;&#x2F;取所有值\n    @Override\n    public String[] getParameterValues(String name) &#123;\n        Map&lt;String, String[]&gt; parameterMap &#x3D; getParameterMap();\n        String[] values &#x3D; parameterMap.get(name);\n        return values;\n    &#125;\n&#125;</code></pre>\n\n<p>网上大神所写，一般情况下，SpringMVC默认的乱码处理就已经能够很好的解决了！</p>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><h3 id=\"什么是JSON\"><a href=\"#什么是JSON\" class=\"headerlink\" title=\"什么是JSON\"></a>什么是JSON</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</p>\n<p> 采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</p>\n<p> 简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</p>\n<p> 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p></blockquote>\n<p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都能通过 JSON来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>对象表示为键值对，数据由逗号分隔</p>\n<p>花括号保存对象</p>\n<p>方括号保存数组</p></blockquote>\n<p><strong>JSON键值对</strong>是保存 JavaScript对象的一种方式,和 JavaScript 对象的写法大同小异，键&#x2F;值对组合中的键名写在前并用双引号“”包裹，用冒号:分隔，然后紧接着值：</p>\n<ul>\n<li><p><code>&#123;&quot;name&quot;: &quot;QinJiang&quot;&#125;</code></p>\n</li>\n<li><p><code>&#123;&quot;age&quot;: &quot;3&quot;&#125;</code></p>\n</li>\n<li><p><code>&#123;&quot;sex&quot;: &quot;男&quot;&#125;</code></p>\n<p>JSON 和 JavaScript 对象的关系 ：</p>\n</li>\n</ul>\n<p>​    JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var obj &#x3D; &#123;a: &#39;Hello&#39;, b: &#39;World&#39;&#125;; &#x2F;&#x2F;这是一个对象，注意键名也是可以使用引号包裹的\nvar json &#x3D; &#39;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#39;; &#x2F;&#x2F;这是一个 JSON 字符串，本质是一个字符串</code></pre>\n\n<h3 id=\"JSON-和-JavaScript-对象互转\"><a href=\"#JSON-和-JavaScript-对象互转\" class=\"headerlink\" title=\"JSON 和 JavaScript 对象互转\"></a><strong>JSON 和 JavaScript 对象互转</strong></h3><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">JSON 和 JavaScript 对象互转\n要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</code></pre>\n\n<p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var json &#x3D; JSON.stringify(&#123;a: &#39;Hello&#39;, b: &#39;World&#39;&#125;);\n&#x2F;&#x2F;结果是 &#39;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#39;</code></pre>\n\n<h3 id=\"代码测试\"><a href=\"#代码测试\" class=\"headerlink\" title=\"代码测试\"></a><strong>代码测试</strong></h3><p>新建一个module ，springmvc-05-json ， 添加web的支持</p>\n<p>在web目录下新建一个 json.html ， 编写测试内容</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n        &#x2F;&#x2F;编写一个JavaScript对象\n        var user &#x3D; &#123;\n            name: &quot;张三&quot;,\n            age: 18,\n            sex: &quot;男&quot;\n        &#125;\n        &#x2F;&#x2F;将js对象转换为JSON对象\n        var json &#x3D; JSON.stringify(user);\n        console.log(json)   &#x2F;&#x2F;输出到控制台\n        console.log(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n        &#x2F;&#x2F;将JSON对象转换为JavaScript对象\n        var obj &#x3D; JSON.parse(json);\n        console.log(obj)   &#x2F;&#x2F;输出到控制台\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaokang111/BlogPicture@main/img/image-20230425215627650.png\" alt=\"image-20230425215627650\"></p>\n<h2 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h2><ul>\n<li><strong>AJAX &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></li>\n<li>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</li>\n<li><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></li>\n<li>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</p>\n<p>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p>\n<p>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p></blockquote>\n<h3 id=\"伪造Ajax\"><a href=\"#伪造Ajax\" class=\"headerlink\" title=\"伪造Ajax\"></a>伪造Ajax</h3><p>我们可以使用前端的iframe标签标签来伪造一个ajax的样子。</p>\n<p>​    新建一个module ： sspringmvc-06-ajax ， 导入web支持！</p>\n<p>​    编写一个 html 使用 iframe 测试，感受下效果</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;iframe测试体验页面无刷新&lt;&#x2F;title&gt;\n    &lt;script&gt;\n        function go() &#123;\n            &#x2F;&#x2F;所有的值变量，提前获取\n            var url &#x3D; document.getElementById(&quot;url&quot;).value;\n            document.getElementById(&quot;iframe1&quot;).src&#x3D;url;\n        &#125;\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;div&gt;\n    &lt;p&gt;请输入地址 :&lt;&#x2F;p&gt;\n    &lt;p&gt;\n        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;url&quot; value&#x3D;&quot;https:&#x2F;&#x2F;www.taobao.com&quot;&gt;\n        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;提交&quot; onclick&#x3D;&quot;go()&quot;&gt;\n    &lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;\n&lt;div&gt;\n    &lt;iframe id&#x3D;&quot;iframe1&quot; style&#x3D;&quot;width:100%;height: 500px;&quot;&gt;&lt;&#x2F;iframe&gt;\n&lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>实现输入网址点击跳转，iframe中的内容变为该网址。</p>\n<p><strong>使用Ajax可以：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注册时，输入用户名自动检测用户是否已经存在。</p>\n<p>登陆时，提示用户名密码错误</p>\n<p>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</p>\n<p>….等等</p></blockquote>\n<h3 id=\"jQuery-ajax\"><a href=\"#jQuery-ajax\" class=\"headerlink\" title=\"jQuery.ajax\"></a>jQuery.ajax</h3><p>纯JS原生实现Ajax不去讲解，直接使用jquery提供的，方便学习和使用.</p>\n<ul>\n<li>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</li>\n<li>jQuery 提供多个与 AJAX 有关的方法。</li>\n<li>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</li>\n<li>jQuery 不是生产者，而是大自然搬运工。</li>\n<li>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">jQuery.ajax(...)\n       部分参数：\n              url：请求地址\n             type：请求方式，GET、POST（1.9.0之后用method）\n          headers：请求头\n             data：要发送的数据\n      contentType：即将发送信息至服务器的内容编码类型(默认: &quot;application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8&quot;)\n            async：是否异步\n          timeout：设置请求超时时间（毫秒）\n       beforeSend：发送请求前执行的函数(全局)\n         complete：完成之后执行的回调函数(全局)\n          success：成功之后执行的回调函数(全局)\n            error：失败之后执行的回调函数(全局)\n          accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型\n         dataType：将服务器端返回的数据转换成指定类型\n            &quot;xml&quot;: 将服务器端返回的内容转换成xml格式\n           &quot;text&quot;: 将服务器端返回的内容转换成普通文本格式\n           &quot;html&quot;: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。\n         &quot;script&quot;: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式\n           &quot;json&quot;: 将服务器端返回的内容转换成相应的JavaScript对象\n          &quot;jsonp&quot;: JSONP 格式使用 JSONP 形式调用函数时，如 &quot;myurl?callback&#x3D;?&quot; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</code></pre>\n\n<p>配置web.xml 和 springmvc的配置文件【记得静态资源过滤和注解驱动配置上】</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context\n        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd\n        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc\n        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd&quot;&gt;\n    &lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;\n    &lt;context:component-scan base-package&#x3D;&quot;com.kuang.controller&quot;&#x2F;&gt;\n    &lt;!--静态资源过滤--&gt;\n    &lt;mvc:default-servlet-handler &#x2F;&gt;\n    &lt;mvc:annotation-driven &#x2F;&gt;\n    &lt;!-- 视图解析器 --&gt;\n    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;\n          id&#x3D;&quot;internalResourceViewResolver&quot;&gt;\n        &lt;!-- 前缀 --&gt;\n        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot; &#x2F;&gt;\n        &lt;!-- 后缀 --&gt;\n        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot; &#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n<p>编写AjaxController中的方法 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package com.lc.controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n@RestController\npublic class AjaxController &#123;\n    @RequestMapping(&quot;&#x2F;t1&quot;)\n    public String test()&#123;\n        return &quot;hello&quot;;\n    &#125;\n    @RequestMapping(&quot;&#x2F;a1&quot;)\n    public void a1(String name, HttpServletResponse response) throws IOException &#123;\n        System.out.println(&quot;a1.param &#x3D;&#x3D;&gt; &quot;+name);\n        if(&quot;zhangsan&quot;.equals(name))&#123;\n            response.getWriter().println(&quot;true&quot;);\n        &#125;else &#123;\n            response.getWriter().println(&quot;false&quot;);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>修改index.jsp :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Ajax异步&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.6.3.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;script&gt;\n      function a()&#123;\n        $.post(&#123;\n          url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;a1&quot;,\n          data:&#123;\n            &quot;name&quot;:$(&quot;#username&quot;).val()\n          &#125;,\n          success:function (data) &#123;\n            alert(data);\n            console.log(&quot;data &#x3D;&gt; &quot;+data);\n            console.log(&quot;status &#x3D;&gt; &quot;+status); &#x2F;&#x2F;200 成功,300 重定向&#x2F;转发,400 客户端错误,500 服务器错误\n          &#125;\n        &#125;)\n      &#125;\n    &lt;&#x2F;script&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n  &lt;%--失去焦点的时候，发送一个请求到后台--%&gt;\n  用户名：&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; onblur&#x3D;&quot;a()&quot;&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>启动tomcat测试。 打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p>\n<h3 id=\"Ajax加载数据\"><a href=\"#Ajax加载数据\" class=\"headerlink\" title=\"Ajax加载数据\"></a>Ajax加载数据</h3><p>编写实体类User :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package com.lc.pojo;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User &#123;\n    private String name;\n    private int age;\n    private String sex;\n&#125;</code></pre>\n\n<p>在UserController中新增方法 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@RequestMapping(&quot;&#x2F;a2&quot;)\npublic List&lt;User&gt; a2()&#123;\n    List&lt;User&gt; userList &#x3D; new ArrayList&lt;User&gt;();\n    &#x2F;&#x2F;添加数据\n    userList.add(new User(&quot;张三&quot;,18,&quot;男&quot;));\n    userList.add(new User(&quot;李四&quot;,18,&quot;男&quot;));\n    userList.add(new User(&quot;王五&quot;,18,&quot;女&quot;));\n    return userList;\n&#125;</code></pre>\n\n<p>新建test2.jsp</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.6.3.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;script&gt;\n        $(function () &#123;\n            $(&quot;#btn&quot;).click(function ()&#123;\n                &#x2F;*\n                $.post(url,param[可以省略],success)\n                *&#x2F;\n                $.post(&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;a2&quot;,function (data) &#123;\n                    console.log(data);\n                    var html &#x3D; &quot;&quot;;\n                    for(let i&#x3D;0;i&lt; data.length;i++)&#123;\n                        html +&#x3D; &quot;&lt;tr&gt;&quot;+\n                            &quot;&lt;td&gt;&quot;+data[i].name +&quot;&lt;&#x2F;td&gt;&quot;+\n                            &quot;&lt;td&gt;&quot;+data[i].age +&quot;&lt;&#x2F;td&gt;&quot;+\n                            &quot;&lt;td&gt;&quot;+data[i].sex +&quot;&lt;&#x2F;td&gt;&quot;+\n                            &quot;&lt;&#x2F;tr&gt;&quot;\n                    &#125;\n                    $(&quot;#context&quot;).html(html);\n                &#125;);\n            &#125;)\n        &#125;);\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;加载数据&quot; id&#x3D;&quot;btn&quot;&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;td&gt;姓名&lt;&#x2F;td&gt;\n            &lt;td&gt;年龄&lt;&#x2F;td&gt;\n            &lt;td&gt;性别&lt;&#x2F;td&gt;\n        &lt;&#x2F;tr&gt;\n        &lt;tbody id&#x3D;&quot;context&quot;&gt;\n        &lt;%--数据:后台--%&gt;\n        &lt;&#x2F;tbody&gt;\n    &lt;&#x2F;table&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>运行,点击按钮局部刷新，显示数据 :</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaokang111/BlogPicture@main/img/image-20230425220030210.png\" alt=\"image-20230425220030210\"></p>\n<h3 id=\"Ajax验证登陆\"><a href=\"#Ajax验证登陆\" class=\"headerlink\" title=\"Ajax验证登陆\"></a>Ajax验证登陆</h3><p>在AjaxController中添加一个方法 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@RequestMapping(&quot;&#x2F;a3&quot;)\npublic String a3(String name,String pwd)&#123;\n    String msg &#x3D; &quot;&quot;;\n    if(name!&#x3D;null)&#123;\n        &#x2F;&#x2F;账号应在数据库中查找，此处省略，用admin代替\n        if(&quot;admin&quot;.equals(name))&#123;\n            msg &#x3D; &quot;OK&quot;;\n        &#125;else &#123;\n            msg &#x3D; &quot;用户名有误!&quot;;\n        &#125;\n    &#125;\n    if(pwd!&#x3D;null)&#123;\n        if(&quot;123456&quot;.equals(pwd))&#123;\n            msg &#x3D; &quot;OK&quot;;\n        &#125;else &#123;\n            msg &#x3D; &quot;密码有误!&quot;;\n        &#125;\n    &#125;\n    return msg;\n&#125;</code></pre>\n\n<p>新建一个前端页面login.jsp :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;登陆界面&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.6.3.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;script&gt;\n        function a1() &#123;\n            $.post(&#123;\n                url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;a3&quot;,\n                data:&#123;&quot;name&quot;:$(&quot;#name&quot;).val()&#125;,\n                success:function (data) &#123;\n                    if(data.toString()&#x3D;&#x3D;&#x3D;&#39;OK&#39;)&#123;\n                        $(&quot;#userInfo&quot;).css(&quot;color&quot;,&quot;green&quot;);\n                    &#125;\n                    else &#123;\n                        $(&quot;#userInfo&quot;).css(&quot;color&quot;,&quot;red&quot;);\n                    &#125;\n                    $(&quot;#userInfo&quot;).html(data);\n                &#125;\n            &#125;)\n        &#125;\n        function a2() &#123;\n            $.post(&#123;\n                url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;a3&quot;,\n                data:&#123;&quot;pwd&quot;:$(&quot;#pwd&quot;).val()&#125;,\n                success:function (data) &#123;\n                    if(data.toString()&#x3D;&#x3D;&#x3D;&#39;OK&#39;)&#123;\n                        $(&quot;#pwdInfo&quot;).css(&quot;color&quot;,&quot;green&quot;);\n                    &#125;\n                    else &#123;\n                        $(&quot;#pwdInfo&quot;).css(&quot;color&quot;,&quot;red&quot;);\n                    &#125;\n                    $(&quot;#pwdInfo&quot;).html(data);\n                &#125;\n            &#125;)\n        &#125;\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;p&gt;\n    用户名 : &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;name&quot; onblur&#x3D;&quot;a1()&quot;&gt;\n    &lt;span id&#x3D;&quot;userInfo&quot;&gt;&lt;&#x2F;span&gt;\n&lt;&#x2F;p&gt;\n&lt;p&gt;\n    密码 : &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;pwd&quot; onblur&#x3D;&quot;a2()&quot;&gt;\n    &lt;span id&#x3D;&quot;pwdInfo&quot;&gt;&lt;&#x2F;span&gt;\n&lt;&#x2F;p&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>运行后实现检测账号密码正确性并局部刷新 :</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaokang111/BlogPicture@main/img/kuangstudyd6b50add-d318-4f69-95bd-effbe0bbdb48.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaokang111/BlogPicture@main/img/image-20230425220212221.png\" alt=\"image-20230425220212221\"></p>\n<h2 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h2><h3 id=\"概况\"><a href=\"#概况\" class=\"headerlink\" title=\"概况\"></a>概况</h3><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p>\n<p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。</p>\n<p><strong>过滤器</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>servlet规范中的一部分，任何java web工程都可以使用</p>\n<p>在url-pattern中配置了&#x2F;*之后，可以对所有要访问的资源进行拦截</p></blockquote>\n<p><strong>拦截器</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</p>\n<p>拦截器只会拦截访问的控制器方法， 如果访问的是jsp&#x2F;html&#x2F;css&#x2F;image&#x2F;js是不会进行拦截的</p></blockquote>\n<h3 id=\"自定义拦截器\"><a href=\"#自定义拦截器\" class=\"headerlink\" title=\"自定义拦截器\"></a>自定义拦截器</h3><p>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</p>\n<p>新建一个Moudule ， springmvc-07-Interceptor ， 添加web支持，配置web.xml 和 springmvc-servlet.xml 文件</p>\n<p>编写一个拦截器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package com.lc.config;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\npublic class MyInterceptor implements HandlerInterceptor &#123;\n    &#x2F;&#x2F;return true; 执行下一个拦截器，放行\n    &#x2F;&#x2F;return false; 不执行下一个拦截器，放行\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;\n        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;处理前&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n        return true;\n    &#125;\n    &#x2F;&#x2F;拦截日志\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;\n        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;处理后&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n    &#125;\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;\n        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;清理&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p>编写一个TestController :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package com.lc.controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n@RestController\npublic class TestController &#123;\n    @RequestMapping(&quot;&#x2F;t1&quot;)\n    public String test()&#123;\n        System.out.println(&quot;TestController &#x3D;&#x3D;&gt; test()执行了!&quot;);\n        return &quot;OK&quot;;\n    &#125;\n&#125;</code></pre>\n\n<p>运行，由于return true，成功访问成功，控制台输出如下 :</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaokang111/BlogPicture@main/img/image-20230425220304838.png\" alt=\"image-20230425220304838\"></p>\n<h3 id=\"登陆判断验证\"><a href=\"#登陆判断验证\" class=\"headerlink\" title=\"登陆判断验证\"></a>登陆判断验证</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>有一个登陆页面，需要写一个controller访问页面。</p>\n<p>登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向session中写入用户信息。<em>返回登陆成功。</em></p>\n<p>拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面</p></blockquote>\n<p>编写一个登陆页面 login.jsp</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;登陆页面&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;%--在WEB-INF下的所有页面或资源，只能通过controller,或者servlet进行访问--%&gt;\n&lt;h1&gt;登陆页面&lt;&#x2F;h1&gt;\n&lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;user&#x2F;login&quot; method&#x3D;&quot;post&quot;&gt;\n    用户名 ： &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; &#x2F;&gt;\n    密码 ： &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;password&quot; &#x2F;&gt;\n    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n&lt;&#x2F;form&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>编写一个Controller处理请求</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package com.lc.controller;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport javax.servlet.http.HttpSession;\n@Controller\n@RequestMapping(&quot;&#x2F;user&quot;)\npublic class LoginController &#123;\n    @RequestMapping(&quot;&#x2F;login&quot;)\n    public String login(HttpSession session, String username, String password, Model model)&#123;\n        &#x2F;&#x2F;把用户的信息存入session中\n        session.setAttribute(&quot;userLoginInfo&quot;,username);\n        model.addAttribute(&quot;username&quot;,username);\n        return &quot;main&quot;;  &#x2F;&#x2F;登陆成功\n    &#125;\n    @RequestMapping(&quot;&#x2F;goLogin&quot;)\n    public String goLogin()&#123;\n        return &quot;login&quot;;\n    &#125;\n    @RequestMapping(&quot;&#x2F;main&quot;)\n    public String main()&#123;\n        return &quot;main&quot;;\n    &#125;\n    @RequestMapping(&quot;&#x2F;goOut&quot;)\n    public String goOut(HttpSession session)&#123;\n        &#x2F;&#x2F;销毁session : session.invalidate();\n        &#x2F;&#x2F;把用户的信息移出session中\n        session.removeAttribute(&quot;userLoginInfo&quot;);\n        return &quot;main&quot;;  &#x2F;&#x2F;登陆成功\n    &#125;\n&#125;</code></pre>\n\n<p>写一个首页页面main.jsp :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;h1&gt;首页&lt;&#x2F;h1&gt;\n&lt;span&gt;$&#123;sessionScope.userLoginInfo&#125;&lt;&#x2F;span&gt;\n&lt;p&gt;\n    &lt;a href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;user&#x2F;goOut&quot;&gt;注销&lt;&#x2F;a&gt;\n&lt;&#x2F;p&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>修改index.jsp :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;$Title$&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n  &lt;h1&gt;&lt;a href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;user&#x2F;goLogin&quot;&gt;登陆页面&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;\n  &lt;h1&gt;&lt;a href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;user&#x2F;main&quot;&gt;首页&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>此时未登录也能访问首页。</p>\n<p>编写用户登录拦截器LoginInterceptor : </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package com.lc.config;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\npublic class LoginInterceptor implements HandlerInterceptor &#123;\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;\n        HttpSession session &#x3D; request.getSession();\n        &#x2F;&#x2F;放行 : 判断什么情况下登录\n        &#x2F;&#x2F;登陆页面也放行\n        if(request.getRequestURI().contains(&quot;goLogin&quot;))&#123;\n            return true;\n        &#125;\n        &#x2F;&#x2F;说明我在提交登陆\n        if(request.getRequestURI().contains(&quot;login&quot;))&#123;\n            return true;\n        &#125;\n        if(session.getAttribute(&quot;userLoginInfo&quot;)!&#x3D;null)&#123;\n            return true;\n        &#125;\n        &#x2F;&#x2F;判断什么情况下没登陆\n        request.getRequestDispatcher(&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;login.jsp&quot;).forward(request,response);\n        return false;\n    &#125;\n&#125;</code></pre>\n\n<p>在Springmvc的配置文件中注册拦截器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;mvc:interceptor&gt;\n            &lt;!--&#x2F;user下面的所有请求--&gt;\n            &lt;mvc:mapping path&#x3D;&quot;&#x2F;user&#x2F;**&quot;&#x2F;&gt;\n            &lt;bean class&#x3D;&quot;com.lc.config.LoginInterceptor&quot; &#x2F;&gt;\n        &lt;&#x2F;mvc:interceptor&gt;</code></pre>\n\n<p>运行 ，未登录无法访问首页，跳转到登陆页面。</p>\n","text":"SpringMVC笔记MVC架构SSM : Spring+SpringMVC+Mybatis (JavaWeb做项目) 重点： SpringMVC的执行流程 SSM框架的整合 **MVC : 模型(dao,service) 视图(jsp) 控制器(Servlet)**，是一种软件...","link":"","photos":[],"count_time":{"symbolsCount":"57k","symbolsTime":"52 mins."},"categories":[],"tags":[{"name":"Java框架","slug":"Java框架","count":8,"path":"api/tags/Java框架.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SpringMVC%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\">SpringMVC笔记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MVC%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">MVC架构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Model1%E6%97%B6%E4%BB%A3\"><span class=\"toc-text\">Model1时代</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Model2%E6%97%B6%E4%BB%A3\"><span class=\"toc-text\">Model2时代</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Servlet\"><span class=\"toc-text\">Servlet</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MVC%E6%A1%86%E6%9E%B6%E8%A6%81%E5%81%9A%E5%93%AA%E4%BA%9B%E4%BA%8B%E6%83%85\"><span class=\"toc-text\">MVC框架要做哪些事情</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%A4%E8%AF%86SpringMVC\"><span class=\"toc-text\">认识SpringMVC</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0SpringMVC\"><span class=\"toc-text\">为什么学习SpringMVC</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E5%BF%83%E6%8E%A7%E5%88%B6%E5%99%A8\"><span class=\"toc-text\">中心控制器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SpringMVC%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">SpringMVC执行原理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91SpringMVC\"><span class=\"toc-text\">基于注解开发SpringMVC</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AEweb-xml\"><span class=\"toc-text\">配置web.xml</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0Spring-MVC%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">添加Spring MVC配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAController\"><span class=\"toc-text\">创建Controller</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E8%A7%86%E5%9B%BE%E5%B1%82\"><span class=\"toc-text\">创建视图层</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AETomcat%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">配置Tomcat运行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Controller\"><span class=\"toc-text\">Controller</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%99%A8Controller\"><span class=\"toc-text\">控制器Controller</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Controller%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">Controller的配置方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0Controller%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">实现Controller接口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3-Controller\"><span class=\"toc-text\">使用注解@Controller</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RequestMapping\"><span class=\"toc-text\">RequestMapping</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RestFul%E9%A3%8E%E6%A0%BC\"><span class=\"toc-text\">RestFul风格</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E7%BB%9F%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">传统方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RestFul%E6%93%8D%E4%BD%9C%E8%B5%84%E6%BA%90%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">RestFul操作资源方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#method%E6%8C%87%E5%AE%9A%E8%AF%B7%E6%B1%82%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">method指定请求类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E6%8C%87%E5%AE%9A%E8%AF%B7%E6%B1%82%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">使用注解指定请求类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E8%B7%AF%E5%BE%84%E5%8F%98%E9%87%8F%E7%9A%84%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">使用路径变量的好处</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%9C%E8%B7%B3%E8%BD%AC%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">结果跳转方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ModelAndView\"><span class=\"toc-text\">ModelAndView</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E8%BD%AC%E5%8F%91\"><span class=\"toc-text\">重定向和转发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%A0%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8\"><span class=\"toc-text\">无视图解析器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%89%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8\"><span class=\"toc-text\">有视图解析器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86\"><span class=\"toc-text\">数据处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">处理提交数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%8F%90%E4%BA%A4%E7%9A%84%E5%9F%9F%E5%90%8D%E7%A7%B0%E5%92%8C%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E5%90%8D%E4%B8%80%E8%87%B4\"><span class=\"toc-text\">1.提交的域名称和处理方法参数名一致</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%8F%90%E4%BA%A4%E7%9A%84%E5%9F%9F%E5%90%8D%E7%A7%B0%E5%92%8C%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E5%90%8D%E4%B8%8D%E4%B8%80%E8%87%B4\"><span class=\"toc-text\">2、提交的域名称和处理方法参数名不一致</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%8F%90%E4%BA%A4%E7%9A%84%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3、提交的是一个对象</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%E5%88%B0%E5%89%8D%E7%AB%AF\"><span class=\"toc-text\">数据显示到前端</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87ModelAndView\"><span class=\"toc-text\">通过ModelAndView</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87ModelMap\"><span class=\"toc-text\">通过ModelMap</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87Model\"><span class=\"toc-text\">通过Model</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">对比</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">乱码问题解决</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JavaWeb%E8%BF%87%E6%BB%A4%E5%99%A8%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">JavaWeb过滤器解决</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AESpringMVC%E7%9A%84%E4%B9%B1%E7%A0%81%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">配置SpringMVC的乱码过滤</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">其他方法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JSON\"><span class=\"toc-text\">JSON</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFJSON\"><span class=\"toc-text\">什么是JSON</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JSON-%E5%92%8C-JavaScript-%E5%AF%B9%E8%B1%A1%E4%BA%92%E8%BD%AC\"><span class=\"toc-text\">JSON 和 JavaScript 对象互转</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">代码测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Ajax\"><span class=\"toc-text\">Ajax</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%AA%E9%80%A0Ajax\"><span class=\"toc-text\">伪造Ajax</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#jQuery-ajax\"><span class=\"toc-text\">jQuery.ajax</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ajax%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">Ajax加载数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ajax%E9%AA%8C%E8%AF%81%E7%99%BB%E9%99%86\"><span class=\"toc-text\">Ajax验证登陆</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">拦截器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%86%B5\"><span class=\"toc-text\">概况</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">自定义拦截器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%99%BB%E9%99%86%E5%88%A4%E6%96%AD%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">登陆判断验证</span></a></li></ol></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"计算机网络","uid":"293c17b4d2a4292133cc4d1ffd7f8725","slug":"学习笔记/计网","date":"2022-12-05T08:00:50.000Z","updated":"2023-02-11T06:01:41.824Z","comments":true,"path":"api/articles/学习笔记/计网.json","keywords":null,"cover":"https://img2.baidu.com/it/u=1258770752,2430321417&fm=253&fmt=auto&app=120&f=JPEG?w=1280&h=800","text":"计网 ","link":"","photos":[],"count_time":{"symbolsCount":3,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"计算机基础","slug":"计算机基础","count":3,"path":"api/tags/计算机基础.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}