{"title":"Java基础","uid":"3316961ecf1671c6065b043220187c47","slug":"学习笔记/JavaSE","date":"2022-12-05T08:00:50.000Z","updated":"2023-03-21T11:05:28.674Z","comments":true,"path":"api/articles/学习笔记/JavaSE.json","keywords":null,"cover":"https://images.pexels.com/photos/12360546/pexels-photo-12360546.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2","content":"<h1 id=\"第一章Java基本语法\"><a href=\"#第一章Java基本语法\" class=\"headerlink\" title=\"第一章Java基本语法\"></a>第一章Java基本语法</h1><h2 id=\"1-1关键字与标识符\"><a href=\"#1-1关键字与标识符\" class=\"headerlink\" title=\"1.1关键字与标识符\"></a>1.1关键字与标识符</h2><h3 id=\"1-1-1java关键字的使用\"><a href=\"#1-1-1java关键字的使用\" class=\"headerlink\" title=\"1.1.1java关键字的使用\"></a>1.1.1java关键字的使用</h3><p>定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）</p>\n<p>特点：关键字中所字母都为小写</p>\n<p>具体哪些关键字：</p>\n<p><img src=\"C:\\Users\\63194\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230211161343448.png\" alt=\"image-20230211161343448\"></p>\n<p><img src=\"C:\\Users\\63194\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230211161347035.png*\" alt=\"image-20230211161347035\">*</p>\n<h3 id=\"1-1-2保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。\"><a href=\"#1-1-2保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。\" class=\"headerlink\" title=\"1.1.2保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。\"></a>1.1.2保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。</h3><p>具体哪些保留字：goto 、const</p>\n<p>注意：自己命名标识符时要避免使用这些保留字</p>\n<h3 id=\"1-1-3-标识符的使用\"><a href=\"#1-1-3-标识符的使用\" class=\"headerlink\" title=\"1.1.3.标识符的使用\"></a>1.1.3.标识符的使用</h3><p>定义：凡是自己可以起名字的地方都叫标识符。</p>\n<p>涉及到的结构：</p>\n<p>包名、类名、接口名、变量名、方法名、常量名</p>\n<p>规则：(必须要遵守。否则，编译不通过)</p>\n<p><img src=\"C:\\Users\\63194\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230211161451423.png\" alt=\"image-20230211161451423\"></p>\n<p>规范：（可以不遵守，不影响编译和运行。但是要求遵守）</p>\n<p><img src=\"C:\\Users\\63194\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230211161457024.png\" alt=\"image-20230211161457024\"></p>\n<p>注意点：</p>\n<p>在起名字时，为了提高阅读性，要尽量意义，“见名知意”。</p>\n<h2 id=\"1-2变量的使用\"><a href=\"#1-2变量的使用\" class=\"headerlink\" title=\"1.2变量的使用\"></a>1.2变量的使用</h2><h3 id=\"1-2-1变量的分类\"><a href=\"#1-2-1变量的分类\" class=\"headerlink\" title=\"1.2.1变量的分类\"></a>1.2.1变量的分类</h3><p>按数据类型分类</p>\n<p><img src=\"C:\\Users\\63194\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230211161545642.png\" alt=\"image-20230211161545642\"></p>\n<h3 id=\"1-2-2定义变量的格式\"><a href=\"#1-2-2定义变量的格式\" class=\"headerlink\" title=\"1.2.2定义变量的格式\"></a>1.2.2定义变量的格式</h3><p>数据类型 变量名 &#x3D; 变量值;</p>\n<p>或</p>\n<p>数据类型 变量名;</p>\n<p>变量名 &#x3D; 变量值;</p>\n<h3 id=\"1-2-3变量使用的注意点\"><a href=\"#1-2-3变量使用的注意点\" class=\"headerlink\" title=\"1.2.3变量使用的注意点\"></a>1.2.3变量使用的注意点</h3><p>① 变量必须先声明，后使用</p>\n<p>② 变量都定义在其作用域内。在作用域内，它是有效的。换句话说，出了作用域，就失效了</p>\n<p>③ 同一个作用域内，不可以声明两个同名的变量</p>\n<h3 id=\"1-2-4基本数据类型变量间运算规则\"><a href=\"#1-2-4基本数据类型变量间运算规则\" class=\"headerlink\" title=\"1.2.4基本数据类型变量间运算规则\"></a>1.2.4基本数据类型变量间运算规则</h3><ul>\n<li><p>涉及到的基本数据类型：除了boolean之外的其他7种</p>\n</li>\n<li><p>自动类型转换(只涉及7种基本数据类型）</p>\n</li>\n</ul>\n<p>结论：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。</p>\n<p>byte 、char 、short –&gt; int –&gt; long –&gt; float –&gt; double</p>\n<p>特别的：当byte、char、short三种类型的变量做运算时，结果为int型</p>\n<p>说明：此时的容量大小指的是，表示数的范围的大和小。比如：float容量要大于long的容量</p>\n<ul>\n<li>强制类型转换(只涉及7种基本数据类型）：自动类型提升运算的逆运算。</li>\n</ul>\n<ol>\n<li>需要使用强转符：()</li>\n<li>注意点：强制类型转换，可能导致精度损失。</li>\n</ol>\n<ul>\n<li>String与8种基本数据类型间的运算</li>\n</ul>\n<ol>\n<li>String属于引用数据类型,翻译为：字符串</li>\n<li>声明String类型变量时，使用一对””</li>\n<li>String可以和8种基本数据类型变量做运算，且运算只能是连接运算：+</li>\n<li>运算的结果仍然是String类型</li>\n</ol>\n<p>避免：</p>\n<p>String s &#x3D; 123;&#x2F;&#x2F;编译错误</p>\n<p>String s1 &#x3D; “123”;</p>\n<p>int i &#x3D; (int)s1;&#x2F;&#x2F;编译错误</p>\n<h2 id=\"1-3进制\"><a href=\"#1-3进制\" class=\"headerlink\" title=\"1.3进制\"></a>1.3进制</h2><h3 id=\"1-3-1编程中涉及的进制及表示方式：\"><a href=\"#1-3-1编程中涉及的进制及表示方式：\" class=\"headerlink\" title=\"1.3.1编程中涉及的进制及表示方式：\"></a>1.3.1编程中涉及的进制及表示方式：</h3><p><img src=\"C:\\Users\\63194\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230211162011508.png\" alt=\"image-20230211162011508\"></p>\n<h3 id=\"1-3-2二进制的使用说明：\"><a href=\"#1-3-2二进制的使用说明：\" class=\"headerlink\" title=\"1.3.2二进制的使用说明：\"></a>1.3.2二进制的使用说明：</h3><ul>\n<li>计算机底层的存储方式：所有数字在计算机底层都以二进制形式存在。</li>\n<li>二进制数据的存储方式：所有的数值，不管正负，底层都以补码的方式存储。</li>\n<li>原码、反码、补码的说明：</li>\n</ul>\n<p>正数：三码合一</p>\n<p>负数：</p>\n<p><img src=\"C:\\Users\\63194\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230211162056385.png\" alt=\"image-20230211162056385\"></p>\n<h3 id=\"1-3-3进制间的互相转换\"><a href=\"#1-3-3进制间的互相转换\" class=\"headerlink\" title=\"1.3.3进制间的互相转换\"></a>1.3.3进制间的互相转换</h3><ul>\n<li><p>图示：</p>\n<p><img src=\"C:\\Users\\63194\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230211162207149.png\" alt=\"image-20230211162207149\"></p>\n</li>\n<li><p>图示二进制转换为十进制：</p>\n</li>\n</ul>\n<p><img src=\"C:\\Users\\63194\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230211162235888.png\" alt=\"image-20230211162235888\"></p>\n<p><img src=\"C:\\Users\\63194\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230211162240553.png\" alt=\"image-20230211162240553\"></p>\n<p><img src=\"C:\\Users\\63194\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230211162248195.png\" alt=\"image-20230211162248195\"></p>\n<ul>\n<li>图示十进制转换为二进制：</li>\n</ul>\n<p><img src=\"C:\\Users\\63194\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230211162310209.png\" alt=\"image-20230211162310209\"></p>\n<ul>\n<li>二进制与八进制、十六进制间的转换</li>\n</ul>\n<p><img src=\"C:\\Users\\63194\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230211162324210.png\" alt=\"image-20230211162324210\"></p>\n<p><img src=\"C:\\Users\\63194\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230211162329667.png\" alt=\"image-20230211162329667\"></p>\n<h2 id=\"1-4运算符\"><a href=\"#1-4运算符\" class=\"headerlink\" title=\"1.4运算符\"></a>1.4运算符</h2><h3 id=\"1-4-1算术运算符\"><a href=\"#1-4-1算术运算符\" class=\"headerlink\" title=\"1.4.1算术运算符\"></a>1.4.1算术运算符</h3><p>算术运算符： + - + - * &#x2F; % (前)++ (后)++ (前)– (后)– +</p>\n<p>除号：&#x2F;</p>\n<p>%:取余运算</p>\n<p>(前)++ :先自增1，后运算</p>\n<p>(后)++ :先运算，后自增1</p>\n<p>(前)– :先自减1，后运算</p>\n<p>(后)– :先运算，后自减1</p>\n<p>连接符：+：只能使用在String与其他数据类型变量之间使用。</p>\n<h3 id=\"1-4-2赋值运算符\"><a href=\"#1-4-2赋值运算符\" class=\"headerlink\" title=\"1.4.2赋值运算符\"></a>1.4.2赋值运算符</h3><p>赋值运算符：&#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;</p>\n<h3 id=\"1-4-3比较运算符\"><a href=\"#1-4-3比较运算符\" class=\"headerlink\" title=\"1.4.3比较运算符\"></a>1.4.3比较运算符</h3><p>比较运算符（关系运算符）: &#x3D;&#x3D; !&#x3D; &gt; &lt; &gt;&#x3D; &lt;&#x3D; instanceof</p>\n<p>比较运算符的结果是boolean类型</p>\n<p>&lt; &gt; &gt;&#x3D; &lt;&#x3D; :只能使用在数值类型的数据之间。</p>\n<p>&#x3D;&#x3D; 和 !&#x3D;: 不仅可以使用在数值类型数据之间，还可以使用在其他引用类型变量之间。</p>\n<h3 id=\"1-4-4逻辑运算符\"><a href=\"#1-4-4逻辑运算符\" class=\"headerlink\" title=\"1.4.4逻辑运算符\"></a>1.4.4逻辑运算符</h3><p>&amp; &amp;&amp; | || ! ^</p>\n<p>区分&amp; 与 &amp;&amp;</p>\n<p>相同点1：&amp; 与 &amp;&amp; 的运算结果相同</p>\n<p>相同点2：当符号左边是true时，二者都会执行符号右边的运算</p>\n<p>不同点：当符号左边是false时，&amp;继续执行符号右边的运算。&amp;&amp;不再执行符号右边的运算。</p>\n<p>区分：| 与 ||</p>\n<p>相同点1：| 与 || 的运算结果相同</p>\n<p>相同点2：当符号左边是false时，二者都会执行符号右边的运算</p>\n<p>不同点3：当符号左边是true时，|继续执行符号右边的运算，而||不再执行符号右边的运算</p>\n<p>逻辑运算符操作的都是boolean类型的变量。而且结果也是boolean类型</p>\n<h3 id=\"1-4-5位运算符\"><a href=\"#1-4-5位运算符\" class=\"headerlink\" title=\"1.4.5位运算符\"></a>1.4.5位运算符</h3><p>&lt;&lt; &gt;&gt; &gt;&gt;&gt; &amp; | ^ ~</p>\n<p>一个&amp;时，参加运算的两个数据，按二进制位进行“与”运算。运算规则：同1为一，其余为0。</p>\n<p>一个 | 时，参加运算的两个对象，按二进制位进行“或”运算。运算规则：同0为0，有1为1。另外，负数按补码形式参加按位或运算。</p>\n<p><strong>位异或（^）：</strong></p>\n<p>参与运算的两个数据，按二进制位进行“异或”运算。运算规则：相同为0，不同为1。</p>\n<p><strong>非位（~）：</strong></p>\n<p>按位取反操作会翻转其每一位。运算规则：0变为1，1变为0。</p>\n<p><strong>左移（&lt;&lt;）：</strong></p>\n<p>符号左边是要进行左移运算的数，右边表示要移动的位数。运算规则：高位丢弃，低位补0。</p>\n<p><strong>右移（&gt;&gt;）：</strong></p>\n<p>符号左边是要进行左移运算的数，右边表示要移动的位数。运算规则：正数左补0，负数左补1.</p>\n<p><strong>无符号右移（&gt;&gt;&gt;）：</strong></p>\n<p>即右移之后，无论该数为正还是为负，右移之后左补0。</p>\n<h3 id=\"1-4-6三元运算符\"><a href=\"#1-4-6三元运算符\" class=\"headerlink\" title=\"1.4.6三元运算符\"></a>1.4.6三元运算符</h3><p>(条件表达式)? 表达式1 : 表达式2</p>\n<ul>\n<li>说明</li>\n</ul>\n<p>① 条件表达式的结果为boolean类型</p>\n<p>② 根据条件表达式真或假，决定执行表达式1，还是表达式2.</p>\n<p>如果表达式为true，则执行表达式1。</p>\n<p>如果表达式为false，则执行表达式2。</p>\n<ul>\n<li><p>凡是可以使用三元运算符的地方，都可以改写为if-else</p>\n</li>\n<li><p>如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。原因：简洁、执行效率高。</p>\n</li>\n</ul>\n<h2 id=\"1-5流程控制\"><a href=\"#1-5流程控制\" class=\"headerlink\" title=\"1.5流程控制\"></a>1.5流程控制</h2><h3 id=\"1-5-1分支结构\"><a href=\"#1-5-1分支结构\" class=\"headerlink\" title=\"1.5.1分支结构\"></a>1.5.1分支结构</h3><p><strong>if-else条件判断结构</strong></p>\n<p>结构一：</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">if(条件表达式)&#123;\n执行表达式\n&#125;</code></pre>\n\n<p>结构二：二选一</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">if(条件表达式)&#123;\n执行表达式1\n&#125;else&#123;\n执行表达式2\n&#125;</code></pre>\n\n<p>结构三：n选一</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if(条件表达式)&#123;\n执行表达式1\n&#125;else if(条件表达式)&#123;\n执行表达式2\n&#125;else if(条件表达式)&#123;\n执行表达式3\n&#125;\n...\nelse&#123;\n执行表达式n\n&#125;</code></pre>\n\n<p><strong>说明：</strong></p>\n<ul>\n<li><p>else 结构是可选的。</p>\n</li>\n<li><p>针对于条件表达式：</p>\n<p>&gt; 如果多个条件表达式之间是“互斥”关系(或没有交集的关系),哪个判断和执行语句声明在上面还是下面，无所谓。</p>\n<p>&gt; 如果多个条件表达式之间有交集的关系，需要根据实际情况，考虑清楚应该将哪个结构声明在上面。</p>\n<p>&gt; 如果多个条件表达式之间有包含的关系，通常情况下，需要将范围小的声明在范围大的上面。否则，范围小的就没机会执行了</p>\n</li>\n<li><p>if-else结构是可以相互嵌套的。</p>\n</li>\n<li><p>如果if-else结构中的执行语句只有一行时，对应的一对{}可以省略的。但是，不建议大家省略。</p>\n</li>\n</ul>\n<p>switch-case<strong>选择结构</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">switch(表达式)&#123;\ncase 常量1:\n执行语句1;\n&#x2F;&#x2F;break;\ncase 常量2:\n执行语句2;\n&#x2F;&#x2F;break;\n...\ndefault:\n执行语句n;\n&#x2F;&#x2F;break;\n&#125;</code></pre>\n\n<p><strong>说明：</strong></p>\n<p>① 根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。</p>\n<p>当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构末尾结束为止。</p>\n<p>② break,可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构</p>\n<p>③ switch结构中的表达式，只能是如下的6种数据类型之一：</p>\n<p>byte 、short、char、int、枚举类型(JDK5.0新增)、String类型(JDK7.0新增)</p>\n<p>④ case 之后只能声明常量。不能声明范围。</p>\n<p>⑤ break关键字是可选的。</p>\n<p>⑥ default:相当于if-else结构中的else.</p>\n<p>default结构是可选的，而且位置是灵活的。</p>\n<ul>\n<li><p>如果switch-case结构中的多个case的执行语句相同，则可以考虑进行合并。</p>\n</li>\n<li><p>break在switch-case中是可选的</p>\n</li>\n</ul>\n<h3 id=\"1-5-2循环结构\"><a href=\"#1-5-2循环结构\" class=\"headerlink\" title=\"1.5.2循环结构\"></a>1.5.2循环结构</h3><p><strong>1.循环结构的四要素</strong></p>\n<p>① 初始化条件</p>\n<p>② 循环条件 —&gt;是boolean类型</p>\n<p>③ 循环体</p>\n<p>④ 迭代条件</p>\n<p>说明：通常情况下，循环结束都是因为②中循环条件返回false了。</p>\n<p><strong>2.循环的三种结构</strong></p>\n<p>2.1 for循环结构</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">for(①;②;④)&#123;\n③\n&#125;</code></pre>\n\n<p>执行过程：① - ② - ③ - ④ - ② - ③ - ④ - … - ②</p>\n<p>2.2 while循环结构</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">①\nwhile(②)&#123;\n③;\n④;\n&#125;</code></pre>\n\n<p>执行过程：① - ② - ③ - ④ - ② - ③ - ④ - … - ②</p>\n<p>说明：</p>\n<p>写while循环千万小心不要丢了迭代条件。一旦丢了，就可能导致死循环！</p>\n<p>for和while循环总结：</p>\n<ul>\n<li>开发中，基本上我们都会从for、while中进行选择，实现循环结构。</li>\n<li>for循环和while循环是可以相互转换的！</li>\n<li>区别：for循环和while循环的初始化条件部分的作用范围不同。</li>\n<li>我们写程序，要避免出现死循环。</li>\n</ul>\n<p>2.3 do-while循环结构</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">①\ndo&#123;\n③;\n④;\n&#125;while(②);</code></pre>\n\n<p>执行过程：① - ③ - ④ - ② - ③ - ④ - … - ②</p>\n<p>说明：</p>\n<ul>\n<li>do-while循环至少会执行一次循环体！</li>\n<li>开发中，使用for和while更多一些。较少使用do-while</li>\n</ul>\n<p><strong>3.“无限循环”结构: while(true) 或 for(;;)</strong></p>\n<p>总结：如何结束一个循环结构？</p>\n<p>方式一：当循环条件是false时</p>\n<p>方式二：在循环体中，执行break</p>\n<p><strong>4.嵌套循环</strong></p>\n<p>1.嵌套循环:将一个循环结构A声明在另一个循环结构B的循环体中,就构成了嵌套循环</p>\n<p>内层循环：循环结构A</p>\n<p>外层循环：循环结构B</p>\n<p>2.说明：</p>\n<p>① 内层循环结构遍历一遍，只相当于外层循环循环体执行了一次</p>\n<p>② 假设外层循环需要执行m次，内层循环需要执行n次。此时内层循环的循环体一共执行了m * n次</p>\n<p>③ 外层循环控制行数，内层循环控制列数</p>\n<p>补充:衡量一个功能代码的优劣：</p>\n<p>1.正确性</p>\n<p>2.可读性</p>\n<p>3.健壮性</p>\n<p>4.高效率与低存储：时间复杂度 、空间复杂度 （衡量算法的好坏）</p>\n<h3 id=\"1-5-3break和continue\"><a href=\"#1-5-3break和continue\" class=\"headerlink\" title=\"1.5.3break和continue\"></a>1.5.3break和continue</h3><p>1.break用于跳出一个循环体或者完全结束一个循环，不仅可以结束其所在的循环，还可结束其外层循环。</p>\n<p>注意：<br>（1）只能在循环体内和switch语句体内使用break。<br>（2）不管是哪种循环，一旦在循环体中遇到break，系统将完全结束循环，开始执行循环之后的代码。<br>（3）当break出现在循环体中的switch语句体内时，起作用只是跳出该switch语句体，并不能终止循环体的执行。若想强行终止循环体的执行，可以在循环体中，但并不在switch语句中设置break语句，满足某种条件则跳出本层循环体。</p>\n<p>2.continue语句的作用是跳过本次循环体中剩下尚未执行的语句，立即进行下一次的循环条件判定，可以理解为只是中止(跳过)本次循环，接着开始下一次循环。</p>\n<p>注意：<br>（1）continue语句并没有使整个循环终止。<br>（2）continue 只能在循环语句中使用，即只能在 for、while 和 do…while 语句中使用。</p>\n<h1 id=\"第二章数组\"><a href=\"#第二章数组\" class=\"headerlink\" title=\"第二章数组\"></a>第二章数组</h1><h2 id=\"2-1一维数组\"><a href=\"#2-1一维数组\" class=\"headerlink\" title=\"2.1一维数组\"></a>2.1一维数组</h2><p>1.一维数组的声明与初始化</p>\n<p>正确的方式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int num;&#x2F;&#x2F;声明\nnum &#x3D; 10;&#x2F;&#x2F;初始化\nint id &#x3D; 1001;&#x2F;&#x2F;声明 + 初始化</code></pre>\n\n<p>int[] ids;&#x2F;&#x2F;声明</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1.1 静态初始化:数组的初始化和数组元素的赋值操作同时进行\nids &#x3D; new int[]&#123;1001,1002,1003,1004&#125;;\n1.2动态初始化:数组的初始化和数组元素的赋值操作分开进行\nString[] names &#x3D; new String[5];</code></pre>\n\n\n\n<p>2.一维数组元素的引用：通过角标的方式调用。</p>\n<p>&#x2F;&#x2F;数组的角标（或索引从0开始的，到数组的长度-1结束。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">names[0] &#x3D; &quot;王铭&quot;;\nnames[1] &#x3D; &quot;王赫&quot;;\nnames[2] &#x3D; &quot;张学良&quot;;\nnames[3] &#x3D; &quot;孙居龙&quot;;\nnames[4] &#x3D; &quot;王宏志&quot;;&#x2F;&#x2F;charAt(0)</code></pre>\n\n<p>3.数组的属性：length</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">System.out.println(names.length);&#x2F;&#x2F;5\nSystem.out.println(ids.length);</code></pre>\n\n<p>说明：</p>\n<p>数组一旦初始化，其长度就是确定的。arr.length</p>\n<p>数组长度一旦确定，就不可修改。</p>\n<p>4.一维数组的遍历</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for(int i &#x3D; 0;i &lt; names.length;i++)&#123;\nSystem.out.println(names[i]);\n&#125;</code></pre>\n\n<p>5.一维数组元素的默认初始化值</p>\n<p>数组元素是整型：0</p>\n<p>数组元素是浮点型：0.0</p>\n<p>数组元素是char型：0或’\\u0000’，而非’0’</p>\n<p>数组元素是boolean型：false</p>\n<h2 id=\"2-2二维数组\"><a href=\"#2-2二维数组\" class=\"headerlink\" title=\"2.2二维数组\"></a>2.2二维数组</h2><p>1.如何理解二维数组？</p>\n<ul>\n<li>数组属于引用数据类型</li>\n<li>数组的元素也可以是引用数据类型</li>\n<li>一个一维数组A的元素如果还是一个一维数组类型的，则，此数组A称为二维数组。</li>\n</ul>\n<p>2.二维数组的声明与初始化</p>\n<p>正确的方式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int[] arr &#x3D; new int[]&#123;1,2,3&#125;;&#x2F;&#x2F;一维数组\n&#x2F;&#x2F;静态初始化 二维数组\nint[][] arr1 &#x3D; new int[][]&#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7,8&#125;&#125;;\n&#x2F;&#x2F;动态初始化1\nString[][] arr2 &#x3D; new String[3][2];\n&#x2F;&#x2F;动态初始化2\nString[][] arr3 &#x3D; new String[3][];\n&#x2F;&#x2F;也是正确的写法：\nint[] arr4[] &#x3D; new int[][]&#123;&#123;1,2,3&#125;,&#123;4,5,9,10&#125;,&#123;6,7,8&#125;&#125;;\n\nint[] arr5[] &#x3D; &#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7,8&#125;&#125;;&#x2F;&#x2F;类型推断</code></pre>\n\n<p>3.如何调用二维数组元素:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">System.out.println(arr1[0][1]);&#x2F;&#x2F;2\nSystem.out.println(arr2[1][1]);&#x2F;&#x2F;null</code></pre>\n\n<p>4.二维数组的属性：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">System.out.println(arr4.length);&#x2F;&#x2F;3\nSystem.out.println(arr4[0].length);&#x2F;&#x2F;3\nSystem.out.println(arr4[1].length);&#x2F;&#x2F;4</code></pre>\n\n<p>5.遍历二维数组元素</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">for(int i &#x3D; 0;i &lt; arr4.length;i++)&#123;\n\tfor(int j &#x3D; 0;j &lt; arr4[i].length;j++)&#123;\n\tSystem.out.print(arr4[i][j] + &quot; &quot;);\n\t&#125;\n\tSystem.out.println();\n&#125;</code></pre>\n\n<p>6.二维数组元素的默认初始化值</p>\n<p>规定：二维数组分为外层数组的元素，内层数组的元素</p>\n<p>int[][] arr &#x3D; new int[4][3];</p>\n<p>外层元素：arr[0],arr[1]等</p>\n<p>内层元素：arr[0][0],arr[1][2]等</p>\n<h2 id=\"2-3数组常见算法\"><a href=\"#2-3数组常见算法\" class=\"headerlink\" title=\"2.3数组常见算法\"></a>2.3数组常见算法</h2><p>1.数组的创建与元素赋值：</p>\n<p>杨辉三角（二维数组）、回形数（二维数组）、6个数，1-30之间随机生成且不重复。</p>\n<p>2.针对于数值型的数组：</p>\n<p>最大值、最小值、总和、平均数等</p>\n<p>3.数组的赋值与复制</p>\n<p>int[] array1,array2;</p>\n<p>array1 &#x3D; new int[]{1,2,3,4};</p>\n<p>3.1 赋值：</p>\n<p>array2 &#x3D; array1;</p>\n<p>如何理解：将array1保存的数组的地址值赋给了array2，使得array1和array2共同指向堆空间中的同一个数组实体。</p>\n<p>3.2 复制：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">array2 &#x3D; new int[array1.length];\nfor(int i &#x3D; 0;i &lt; array2.length;i++)&#123;\n\tarray2[i] &#x3D; array1[i];\n&#125;</code></pre>\n\n<p>如何理解：我们通过new的方式，给array2在堆空间中新开辟了数组的空间。将array1数组中的元素值一个一个的赋值到array2数组中。</p>\n<p>4.数组元素的反转</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&#x2F;&#x2F;方法一：\nfor(int i &#x3D; 0;i &lt; arr.length &#x2F; 2;i++)&#123;\n\tString temp &#x3D; arr[i];\n\tarr[i] &#x3D; arr[arr.length - i -1];\n\tarr[arr.length - i -1] &#x3D; temp;\n&#125;</code></pre>\n\n\n\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&#x2F;&#x2F;方法二：\nfor(int i &#x3D; 0,j &#x3D; arr.length - 1;i &lt; j;i++,j--)&#123;\n\tString temp &#x3D; arr[i];\n\tarr[i] &#x3D; arr[j];\n\tarr[j] &#x3D; temp;\n&#125; </code></pre>\n\n<p>5.数组中指定元素的查找：搜索、检索</p>\n<p>5.1 线性查找：</p>\n<p>实现思路：通过遍历的方式，一个一个的数据进行比较、查找。</p>\n<p>适用性：具有普遍适用性。</p>\n<p>5.2 二分法查找：</p>\n<p>实现思路：每次比较中间值，折半的方式检索。</p>\n<p>适用性：（前提：数组必须有序）</p>\n<p>6.数组的排序算法</p>\n<p>理解：</p>\n<p>1）衡量排序算法的优劣：</p>\n<p>时间复杂度、空间复杂度、稳定性</p>\n<p>2）排序的分类：内部排序 与 外部排序（需要借助于磁盘）</p>\n<p>3）不同排序算法的时间复杂度</p>\n<p>4）手写冒泡排序</p>\n<p>int[] arr &#x3D; new int[]{43,32,76,-98,0,64,33,-21,32,99};</p>\n<p>&#x2F;&#x2F;冒泡排序</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">for(int i &#x3D; 0;i &lt; arr.length - 1;i++)&#123;\n\tfor(int j &#x3D; 0;j &lt; arr.length - 1 - i;j++)&#123;\n\t\tif(arr[j] &gt; arr[j + 1])&#123;\n\t\tint temp &#x3D; arr[j];\n\t\tarr[j] &#x3D; arr[j + 1];\n\t\tarr[j + 1] &#x3D; temp;\n\t\t&#125;\n\t&#125;\n&#125;        </code></pre>\n\n<h2 id=\"2-4Arrays工具类\"><a href=\"#2-4Arrays工具类\" class=\"headerlink\" title=\"2.4Arrays工具类\"></a>2.4Arrays工具类</h2><p>1.理解：</p>\n<p>① 定义在java.util包下。</p>\n<p>② Arrays:提供了很多操作数组的方法。</p>\n<p>2.使用：</p>\n<p>&#x2F;&#x2F;1.boolean equals(int[] a,int[] b):判断两个数组是否相等。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int[] arr1 &#x3D; new int[]&#123;1,2,3,4&#125;;\nint[] arr2 &#x3D; new int[]&#123;1,3,2,4&#125;;\nboolean isEquals &#x3D; Arrays.equals(arr1, arr2);\nSystem.out.println(isEquals);</code></pre>\n\n<p>&#x2F;&#x2F;2.String toString(int[] a):输出数组信息。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">System.out.println(Arrays.toString(arr1));</code></pre>\n\n<p>&#x2F;&#x2F;3.void fill(int[] a,int val):将指定值填充到数组之中。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Arrays.fill(arr1,10);\nSystem.out.println(Arrays.toString(arr1));</code></pre>\n\n<p>&#x2F;&#x2F;4.void sort(int[] a):对数组进行排序。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Arrays.sort(arr2);\nSystem.out.println(Arrays.toString(arr2));</code></pre>\n\n<p>&#x2F;&#x2F;5.int binarySearch(int[] a,int key)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int[] arr3 &#x3D; new int[]&#123;-98,-34,2,34,54,66,79,105,210,333&#125;;\nint index &#x3D; Arrays.binarySearch(arr3, 210);\nif(index &gt;&#x3D; 0)&#123;\nSystem.out.println(index);\n&#125;else&#123;\nSystem.out.println(&quot;未找到&quot;);\n&#125;</code></pre>\n\n<h2 id=\"2-5数组的常见异常\"><a href=\"#2-5数组的常见异常\" class=\"headerlink\" title=\"2.5数组的常见异常\"></a>2.5数组的常见异常</h2><p>1.数组角标越界异常：ArrayIndexOutOfBoundsException</p>\n<p>int[] arr &#x3D; new int[]{1,2,3,4,5};</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for(int i &#x3D; 0;i &lt;&#x3D; arr.length;i++)&#123;\n\tSystem.out.println(arr[i]);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">System.out.println(arr[-2]);\nSystem.out.println(&quot;hello&quot;);</code></pre>\n\n<p>2.空指针异常：NullPointerException</p>\n<p>&#x2F;&#x2F;情况一：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int[] arr1 &#x3D; new int[]&#123;1,2,3&#125;;\narr1 &#x3D; null;\nSystem.out.println(arr1[0]);</code></pre>\n\n<p>&#x2F;&#x2F;情况二：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int[][] arr2 &#x3D; new int[4][];\nSystem.out.println(arr2[0][0]);</code></pre>\n\n<p>&#x2F;&#x2F;情况三：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">String[] arr3 &#x3D; new String[]&#123;&quot;AA&quot;,&quot;BB&quot;,&quot;CC&quot;&#125;;\narr3[0] &#x3D; null;\nSystem.out.println(arr3[0].toString());</code></pre>\n\n<p>小知识：一旦程序出现异常，未处理时，就终止执行。</p>\n","text":"第一章Java基本语法1.1关键字与标识符1.1.1java关键字的使用定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词） 特点：关键字中所字母都为小写 具体哪些关键字： * 1.1.2保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。具体哪些保留字：...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0Java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">第一章Java基本语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E6%A0%87%E8%AF%86%E7%AC%A6\"><span class=\"toc-text\">1.1关键字与标识符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-1java%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1.1.1java关键字的使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-2%E4%BF%9D%E7%95%99%E5%AD%97%EF%BC%9A%E7%8E%B0Java%E7%89%88%E6%9C%AC%E5%B0%9A%E6%9C%AA%E4%BD%BF%E7%94%A8%EF%BC%8C%E4%BD%86%E4%BB%A5%E5%90%8E%E7%89%88%E6%9C%AC%E5%8F%AF%E8%83%BD%E4%BC%9A%E4%BD%9C%E4%B8%BA%E5%85%B3%E9%94%AE%E5%AD%97%E4%BD%BF%E7%94%A8%E3%80%82\"><span class=\"toc-text\">1.1.2保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-3-%E6%A0%87%E8%AF%86%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1.1.3.标识符的使用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1.2变量的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-1%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">1.2.1变量的分类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-2%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E7%9A%84%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">1.2.2定义变量的格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-3%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9\"><span class=\"toc-text\">1.2.3变量使用的注意点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-4%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E9%97%B4%E8%BF%90%E7%AE%97%E8%A7%84%E5%88%99\"><span class=\"toc-text\">1.2.4基本数据类型变量间运算规则</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3%E8%BF%9B%E5%88%B6\"><span class=\"toc-text\">1.3进制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-1%E7%BC%96%E7%A8%8B%E4%B8%AD%E6%B6%89%E5%8F%8A%E7%9A%84%E8%BF%9B%E5%88%B6%E5%8F%8A%E8%A1%A8%E7%A4%BA%E6%96%B9%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">1.3.1编程中涉及的进制及表示方式：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-2%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%EF%BC%9A\"><span class=\"toc-text\">1.3.2二进制的使用说明：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-3%E8%BF%9B%E5%88%B6%E9%97%B4%E7%9A%84%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">1.3.3进制间的互相转换</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.4运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-1%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.4.1算术运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-2%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.4.2赋值运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-3%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.4.3比较运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-4%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.4.4逻辑运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-5%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.4.5位运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-6%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.4.6三元运算符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-5%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">1.5流程控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-1%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1.5.1分支结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-2%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1.5.2循环结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-3break%E5%92%8Ccontinue\"><span class=\"toc-text\">1.5.3break和continue</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">第二章数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">2.1一维数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">2.2二维数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3%E6%95%B0%E7%BB%84%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">2.3数组常见算法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4Arrays%E5%B7%A5%E5%85%B7%E7%B1%BB\"><span class=\"toc-text\">2.4Arrays工具类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">2.5数组的常见异常</span></a></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JVM","uid":"0b1381c4a63c09e41167c5168339035a","slug":"学习笔记/JVM","date":"2022-12-05T08:00:50.000Z","updated":"2023-02-11T08:07:59.187Z","comments":true,"path":"api/articles/学习笔记/JVM.json","keywords":null,"cover":"https://img1.baidu.com/it/u=484445536,1036788824&fm=253&fmt=auto&app=120&f=JPEG?w=1280&h=800","text":"JVM ","link":"","photos":[],"count_time":{"symbolsCount":4,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JavaWeb","uid":"2174f5d6204b80063f7ff0e3c82666fd","slug":"学习笔记/JavaWeb","date":"2022-12-05T08:00:50.000Z","updated":"2023-02-11T05:31:23.975Z","comments":true,"path":"api/articles/学习笔记/JavaWeb.json","keywords":null,"cover":"https://images.pexels.com/photos/12360547/pexels-photo-12360547.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2","text":"JavaWeb ","link":"","photos":[],"count_time":{"symbolsCount":8,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}